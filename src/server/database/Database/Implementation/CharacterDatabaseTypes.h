// generated by D:\Users\Shauren\Desktop\Sources\TrinityCore\dep\sqlpp11\scripts\ddl2cpp.py ..\..\..\sql\base\characters_database.sql CharacterDatabaseTypes chardb
#ifndef CHARDB_CHARACTERDATABASETYPES_H
#define CHARDB_CHARACTERDATABASETYPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace chardb
{
  namespace AccountData_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T data;
            T& operator()() { return data; }
            const T& operator()() const { return data; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
  }

  struct AccountData: sqlpp::table_t<AccountData,
               AccountData_::AccountId,
               AccountData_::Type,
               AccountData_::Time,
               AccountData_::Data>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountData;
        T& operator()() { return accountData; }
        const T& operator()() const { return accountData; }
      };
    };
  };
  namespace AccountInstanceTimes_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct InstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceId;
            T& operator()() { return instanceId; }
            const T& operator()() const { return instanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ReleaseTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "releaseTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T releaseTime;
            T& operator()() { return releaseTime; }
            const T& operator()() const { return releaseTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct AccountInstanceTimes: sqlpp::table_t<AccountInstanceTimes,
               AccountInstanceTimes_::AccountId,
               AccountInstanceTimes_::InstanceId,
               AccountInstanceTimes_::ReleaseTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_instance_times";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountInstanceTimes;
        T& operator()() { return accountInstanceTimes; }
        const T& operator()() const { return accountInstanceTimes; }
      };
    };
  };
  namespace AccountTutorial_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut0;
            T& operator()() { return tut0; }
            const T& operator()() const { return tut0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut1;
            T& operator()() { return tut1; }
            const T& operator()() const { return tut1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut2;
            T& operator()() { return tut2; }
            const T& operator()() const { return tut2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut3;
            T& operator()() { return tut3; }
            const T& operator()() const { return tut3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut4;
            T& operator()() { return tut4; }
            const T& operator()() const { return tut4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut5;
            T& operator()() { return tut5; }
            const T& operator()() const { return tut5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut6;
            T& operator()() { return tut6; }
            const T& operator()() const { return tut6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tut7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tut7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tut7;
            T& operator()() { return tut7; }
            const T& operator()() const { return tut7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct AccountTutorial: sqlpp::table_t<AccountTutorial,
               AccountTutorial_::AccountId,
               AccountTutorial_::Tut0,
               AccountTutorial_::Tut1,
               AccountTutorial_::Tut2,
               AccountTutorial_::Tut3,
               AccountTutorial_::Tut4,
               AccountTutorial_::Tut5,
               AccountTutorial_::Tut6,
               AccountTutorial_::Tut7>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_tutorial";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountTutorial;
        T& operator()() { return accountTutorial; }
        const T& operator()() const { return accountTutorial; }
      };
    };
  };
  namespace ArenaTeam_
  {
    struct ArenaTeamId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "arenaTeamId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arenaTeamId;
            T& operator()() { return arenaTeamId; }
            const T& operator()() const { return arenaTeamId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct CaptainGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "captainGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T captainGuid;
            T& operator()() { return captainGuid; }
            const T& operator()() const { return captainGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Rating
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rating";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rating;
            T& operator()() { return rating; }
            const T& operator()() const { return rating; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct SeasonGames
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seasonGames";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seasonGames;
            T& operator()() { return seasonGames; }
            const T& operator()() const { return seasonGames; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct SeasonWins
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seasonWins";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seasonWins;
            T& operator()() { return seasonWins; }
            const T& operator()() const { return seasonWins; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct WeekGames
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weekGames";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weekGames;
            T& operator()() { return weekGames; }
            const T& operator()() const { return weekGames; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct WeekWins
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weekWins";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weekWins;
            T& operator()() { return weekWins; }
            const T& operator()() const { return weekWins; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Rank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank;
            T& operator()() { return rank; }
            const T& operator()() const { return rank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BackgroundColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "backgroundColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T backgroundColor;
            T& operator()() { return backgroundColor; }
            const T& operator()() const { return backgroundColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EmblemStyle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "emblemStyle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T emblemStyle;
            T& operator()() { return emblemStyle; }
            const T& operator()() const { return emblemStyle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct EmblemColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "emblemColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T emblemColor;
            T& operator()() { return emblemColor; }
            const T& operator()() const { return emblemColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BorderStyle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "borderStyle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T borderStyle;
            T& operator()() { return borderStyle; }
            const T& operator()() const { return borderStyle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BorderColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "borderColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T borderColor;
            T& operator()() { return borderColor; }
            const T& operator()() const { return borderColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct ArenaTeam: sqlpp::table_t<ArenaTeam,
               ArenaTeam_::ArenaTeamId,
               ArenaTeam_::Name,
               ArenaTeam_::CaptainGuid,
               ArenaTeam_::Type,
               ArenaTeam_::Rating,
               ArenaTeam_::SeasonGames,
               ArenaTeam_::SeasonWins,
               ArenaTeam_::WeekGames,
               ArenaTeam_::WeekWins,
               ArenaTeam_::Rank,
               ArenaTeam_::BackgroundColor,
               ArenaTeam_::EmblemStyle,
               ArenaTeam_::EmblemColor,
               ArenaTeam_::BorderStyle,
               ArenaTeam_::BorderColor>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "arena_team";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T arenaTeam;
        T& operator()() { return arenaTeam; }
        const T& operator()() const { return arenaTeam; }
      };
    };
  };
  namespace ArenaTeamMember_
  {
    struct ArenaTeamId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "arenaTeamId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T arenaTeamId;
            T& operator()() { return arenaTeamId; }
            const T& operator()() const { return arenaTeamId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct WeekGames
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weekGames";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weekGames;
            T& operator()() { return weekGames; }
            const T& operator()() const { return weekGames; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct WeekWins
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "weekWins";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weekWins;
            T& operator()() { return weekWins; }
            const T& operator()() const { return weekWins; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct SeasonGames
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seasonGames";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seasonGames;
            T& operator()() { return seasonGames; }
            const T& operator()() const { return seasonGames; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct SeasonWins
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "seasonWins";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seasonWins;
            T& operator()() { return seasonWins; }
            const T& operator()() const { return seasonWins; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PersonalRating
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "personalRating";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T personalRating;
            T& operator()() { return personalRating; }
            const T& operator()() const { return personalRating; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct ArenaTeamMember: sqlpp::table_t<ArenaTeamMember,
               ArenaTeamMember_::ArenaTeamId,
               ArenaTeamMember_::Guid,
               ArenaTeamMember_::WeekGames,
               ArenaTeamMember_::WeekWins,
               ArenaTeamMember_::SeasonGames,
               ArenaTeamMember_::SeasonWins,
               ArenaTeamMember_::PersonalRating>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "arena_team_member";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T arenaTeamMember;
        T& operator()() { return arenaTeamMember; }
        const T& operator()() const { return arenaTeamMember; }
      };
    };
  };
  namespace Auctionhouse_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Auctioneerguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "auctioneerguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T auctioneerguid;
            T& operator()() { return auctioneerguid; }
            const T& operator()() const { return auctioneerguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Itemguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemguid;
            T& operator()() { return itemguid; }
            const T& operator()() const { return itemguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Itemowner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemowner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemowner;
            T& operator()() { return itemowner; }
            const T& operator()() const { return itemowner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Buyoutprice
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "buyoutprice";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T buyoutprice;
            T& operator()() { return buyoutprice; }
            const T& operator()() const { return buyoutprice; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Buyguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "buyguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T buyguid;
            T& operator()() { return buyguid; }
            const T& operator()() const { return buyguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Lastbid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lastbid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastbid;
            T& operator()() { return lastbid; }
            const T& operator()() const { return lastbid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Startbid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "startbid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startbid;
            T& operator()() { return startbid; }
            const T& operator()() const { return startbid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Deposit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deposit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deposit;
            T& operator()() { return deposit; }
            const T& operator()() const { return deposit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct Auctionhouse: sqlpp::table_t<Auctionhouse,
               Auctionhouse_::Id,
               Auctionhouse_::Auctioneerguid,
               Auctionhouse_::Itemguid,
               Auctionhouse_::Itemowner,
               Auctionhouse_::Buyoutprice,
               Auctionhouse_::Time,
               Auctionhouse_::Buyguid,
               Auctionhouse_::Lastbid,
               Auctionhouse_::Startbid,
               Auctionhouse_::Deposit>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "auctionhouse";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T auctionhouse;
        T& operator()() { return auctionhouse; }
        const T& operator()() const { return auctionhouse; }
      };
    };
  };
  namespace BlackmarketAuctions_
  {
    struct MarketId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "marketId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T marketId;
            T& operator()() { return marketId; }
            const T& operator()() const { return marketId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CurrentBid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "currentBid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentBid;
            T& operator()() { return currentBid; }
            const T& operator()() const { return currentBid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct NumBids
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "numBids";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numBids;
            T& operator()() { return numBids; }
            const T& operator()() const { return numBids; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Bidder
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bidder";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bidder;
            T& operator()() { return bidder; }
            const T& operator()() const { return bidder; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct BlackmarketAuctions: sqlpp::table_t<BlackmarketAuctions,
               BlackmarketAuctions_::MarketId,
               BlackmarketAuctions_::CurrentBid,
               BlackmarketAuctions_::Time,
               BlackmarketAuctions_::NumBids,
               BlackmarketAuctions_::Bidder>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blackmarket_auctions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blackmarketAuctions;
        T& operator()() { return blackmarketAuctions; }
        const T& operator()() const { return blackmarketAuctions; }
      };
    };
  };
  namespace Bugreport_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Content
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "content";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T content;
            T& operator()() { return content; }
            const T& operator()() const { return content; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct Bugreport: sqlpp::table_t<Bugreport,
               Bugreport_::Id,
               Bugreport_::Type,
               Bugreport_::Content>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "bugreport";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T bugreport;
        T& operator()() { return bugreport; }
        const T& operator()() const { return bugreport; }
      };
    };
  };
  namespace CalendarEvents_
  {
    struct EventID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EventID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EventID;
            T& operator()() { return EventID; }
            const T& operator()() const { return EventID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Owner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Owner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Owner;
            T& operator()() { return Owner; }
            const T& operator()() const { return Owner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Title;
            T& operator()() { return Title; }
            const T& operator()() const { return Title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Description;
            T& operator()() { return Description; }
            const T& operator()() const { return Description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct EventType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EventType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EventType;
            T& operator()() { return EventType; }
            const T& operator()() const { return EventType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct TextureID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TextureID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TextureID;
            T& operator()() { return TextureID; }
            const T& operator()() const { return TextureID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Date;
            T& operator()() { return Date; }
            const T& operator()() const { return Date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct LockDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "LockDate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LockDate;
            T& operator()() { return LockDate; }
            const T& operator()() const { return LockDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CalendarEvents: sqlpp::table_t<CalendarEvents,
               CalendarEvents_::EventID,
               CalendarEvents_::Owner,
               CalendarEvents_::Title,
               CalendarEvents_::Description,
               CalendarEvents_::EventType,
               CalendarEvents_::TextureID,
               CalendarEvents_::Date,
               CalendarEvents_::Flags,
               CalendarEvents_::LockDate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "calendar_events";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T calendarEvents;
        T& operator()() { return calendarEvents; }
        const T& operator()() const { return calendarEvents; }
      };
    };
  };
  namespace CalendarInvites_
  {
    struct InviteID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "InviteID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T InviteID;
            T& operator()() { return InviteID; }
            const T& operator()() const { return InviteID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct EventID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EventID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EventID;
            T& operator()() { return EventID; }
            const T& operator()() const { return EventID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Invitee
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Invitee";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Invitee;
            T& operator()() { return Invitee; }
            const T& operator()() const { return Invitee; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Sender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Sender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Sender;
            T& operator()() { return Sender; }
            const T& operator()() const { return Sender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Status;
            T& operator()() { return Status; }
            const T& operator()() const { return Status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ResponseTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ResponseTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ResponseTime;
            T& operator()() { return ResponseTime; }
            const T& operator()() const { return ResponseTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ModerationRank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ModerationRank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ModerationRank;
            T& operator()() { return ModerationRank; }
            const T& operator()() const { return ModerationRank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Note;
            T& operator()() { return Note; }
            const T& operator()() const { return Note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct CalendarInvites: sqlpp::table_t<CalendarInvites,
               CalendarInvites_::InviteID,
               CalendarInvites_::EventID,
               CalendarInvites_::Invitee,
               CalendarInvites_::Sender,
               CalendarInvites_::Status,
               CalendarInvites_::ResponseTime,
               CalendarInvites_::ModerationRank,
               CalendarInvites_::Note>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "calendar_invites";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T calendarInvites;
        T& operator()() { return calendarInvites; }
        const T& operator()() const { return calendarInvites; }
      };
    };
  };
  namespace Channels_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Team
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "team";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T team;
            T& operator()() { return team; }
            const T& operator()() const { return team; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Announce
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "announce";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T announce;
            T& operator()() { return announce; }
            const T& operator()() const { return announce; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Ownership
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ownership";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ownership;
            T& operator()() { return ownership; }
            const T& operator()() const { return ownership; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct BannedList
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bannedList";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bannedList;
            T& operator()() { return bannedList; }
            const T& operator()() const { return bannedList; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct LastUsed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lastUsed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastUsed;
            T& operator()() { return lastUsed; }
            const T& operator()() const { return lastUsed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  }

  struct Channels: sqlpp::table_t<Channels,
               Channels_::Name,
               Channels_::Team,
               Channels_::Announce,
               Channels_::Ownership,
               Channels_::Password,
               Channels_::BannedList,
               Channels_::LastUsed>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "channels";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T channels;
        T& operator()() { return channels; }
        const T& operator()() const { return channels; }
      };
    };
  };
  namespace CharacterAccountData_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T data;
            T& operator()() { return data; }
            const T& operator()() const { return data; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
  }

  struct CharacterAccountData: sqlpp::table_t<CharacterAccountData,
               CharacterAccountData_::Guid,
               CharacterAccountData_::Type,
               CharacterAccountData_::Time,
               CharacterAccountData_::Data>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_account_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterAccountData;
        T& operator()() { return characterAccountData; }
        const T& operator()() const { return characterAccountData; }
      };
    };
  };
  namespace CharacterAchievement_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Achievement
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "achievement";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T achievement;
            T& operator()() { return achievement; }
            const T& operator()() const { return achievement; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterAchievement: sqlpp::table_t<CharacterAchievement,
               CharacterAchievement_::Guid,
               CharacterAchievement_::Achievement,
               CharacterAchievement_::Date>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_achievement";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterAchievement;
        T& operator()() { return characterAchievement; }
        const T& operator()() const { return characterAchievement; }
      };
    };
  };
  namespace CharacterAchievementProgress_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Criteria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "criteria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T criteria;
            T& operator()() { return criteria; }
            const T& operator()() const { return criteria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Counter
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "counter";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T counter;
            T& operator()() { return counter; }
            const T& operator()() const { return counter; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterAchievementProgress: sqlpp::table_t<CharacterAchievementProgress,
               CharacterAchievementProgress_::Guid,
               CharacterAchievementProgress_::Criteria,
               CharacterAchievementProgress_::Counter,
               CharacterAchievementProgress_::Date>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_achievement_progress";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterAchievementProgress;
        T& operator()() { return characterAchievementProgress; }
        const T& operator()() const { return characterAchievementProgress; }
      };
    };
  };
  namespace CharacterAction_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Spec
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spec";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spec;
            T& operator()() { return spec; }
            const T& operator()() const { return spec; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Button
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "button";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T button;
            T& operator()() { return button; }
            const T& operator()() const { return button; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Action
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "action";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T action;
            T& operator()() { return action; }
            const T& operator()() const { return action; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterAction: sqlpp::table_t<CharacterAction,
               CharacterAction_::Guid,
               CharacterAction_::Spec,
               CharacterAction_::Button,
               CharacterAction_::Action,
               CharacterAction_::Type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_action";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterAction;
        T& operator()() { return characterAction; }
        const T& operator()() const { return characterAction; }
      };
    };
  };
  namespace CharacterArenaStats_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct MatchMakerRating
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "matchMakerRating";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T matchMakerRating;
            T& operator()() { return matchMakerRating; }
            const T& operator()() const { return matchMakerRating; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
  }

  struct CharacterArenaStats: sqlpp::table_t<CharacterArenaStats,
               CharacterArenaStats_::Guid,
               CharacterArenaStats_::Slot,
               CharacterArenaStats_::MatchMakerRating>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_arena_stats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterArenaStats;
        T& operator()() { return characterArenaStats; }
        const T& operator()() const { return characterArenaStats; }
      };
    };
  };
  namespace CharacterAura_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct CasterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "casterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T casterGuid;
            T& operator()() { return casterGuid; }
            const T& operator()() const { return casterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EffectMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "effectMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectMask;
            T& operator()() { return effectMask; }
            const T& operator()() const { return effectMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct RecalculateMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "recalculateMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recalculateMask;
            T& operator()() { return recalculateMask; }
            const T& operator()() const { return recalculateMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct StackCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stackCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stackCount;
            T& operator()() { return stackCount; }
            const T& operator()() const { return stackCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct MaxDuration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxDuration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxDuration;
            T& operator()() { return maxDuration; }
            const T& operator()() const { return maxDuration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RemainTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "remainTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remainTime;
            T& operator()() { return remainTime; }
            const T& operator()() const { return remainTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RemainCharges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "remainCharges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remainCharges;
            T& operator()() { return remainCharges; }
            const T& operator()() const { return remainCharges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct CastItemLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "castItemLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T castItemLevel;
            T& operator()() { return castItemLevel; }
            const T& operator()() const { return castItemLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterAura: sqlpp::table_t<CharacterAura,
               CharacterAura_::Guid,
               CharacterAura_::CasterGuid,
               CharacterAura_::ItemGuid,
               CharacterAura_::Spell,
               CharacterAura_::EffectMask,
               CharacterAura_::RecalculateMask,
               CharacterAura_::StackCount,
               CharacterAura_::MaxDuration,
               CharacterAura_::RemainTime,
               CharacterAura_::RemainCharges,
               CharacterAura_::CastItemLevel>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_aura";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterAura;
        T& operator()() { return characterAura; }
        const T& operator()() const { return characterAura; }
      };
    };
  };
  namespace CharacterAuraEffect_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct CasterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "casterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T casterGuid;
            T& operator()() { return casterGuid; }
            const T& operator()() const { return casterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EffectMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "effectMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectMask;
            T& operator()() { return effectMask; }
            const T& operator()() const { return effectMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EffectIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "effectIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectIndex;
            T& operator()() { return effectIndex; }
            const T& operator()() const { return effectIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BaseAmount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "baseAmount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T baseAmount;
            T& operator()() { return baseAmount; }
            const T& operator()() const { return baseAmount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterAuraEffect: sqlpp::table_t<CharacterAuraEffect,
               CharacterAuraEffect_::Guid,
               CharacterAuraEffect_::CasterGuid,
               CharacterAuraEffect_::ItemGuid,
               CharacterAuraEffect_::Spell,
               CharacterAuraEffect_::EffectMask,
               CharacterAuraEffect_::EffectIndex,
               CharacterAuraEffect_::Amount,
               CharacterAuraEffect_::BaseAmount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_aura_effect";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterAuraEffect;
        T& operator()() { return characterAuraEffect; }
        const T& operator()() const { return characterAuraEffect; }
      };
    };
  };
  namespace CharacterBanned_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Bandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bandate;
            T& operator()() { return bandate; }
            const T& operator()() const { return bandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Unbandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "unbandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unbandate;
            T& operator()() { return unbandate; }
            const T& operator()() const { return unbandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Bannedby
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bannedby";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bannedby;
            T& operator()() { return bannedby; }
            const T& operator()() const { return bannedby; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Banreason
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "banreason";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T banreason;
            T& operator()() { return banreason; }
            const T& operator()() const { return banreason; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterBanned: sqlpp::table_t<CharacterBanned,
               CharacterBanned_::Guid,
               CharacterBanned_::Bandate,
               CharacterBanned_::Unbandate,
               CharacterBanned_::Bannedby,
               CharacterBanned_::Banreason,
               CharacterBanned_::Active>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_banned";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterBanned;
        T& operator()() { return characterBanned; }
        const T& operator()() const { return characterBanned; }
      };
    };
  };
  namespace CharacterBattlegroundData_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct InstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceId;
            T& operator()() { return instanceId; }
            const T& operator()() const { return instanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Team
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "team";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T team;
            T& operator()() { return team; }
            const T& operator()() const { return team; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct JoinX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joinX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinX;
            T& operator()() { return joinX; }
            const T& operator()() const { return joinX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct JoinY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joinY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinY;
            T& operator()() { return joinY; }
            const T& operator()() const { return joinY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct JoinZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joinZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinZ;
            T& operator()() { return joinZ; }
            const T& operator()() const { return joinZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct JoinO
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joinO";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinO;
            T& operator()() { return joinO; }
            const T& operator()() const { return joinO; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct JoinMapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "joinMapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joinMapId;
            T& operator()() { return joinMapId; }
            const T& operator()() const { return joinMapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct TaxiStart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "taxiStart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taxiStart;
            T& operator()() { return taxiStart; }
            const T& operator()() const { return taxiStart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TaxiEnd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "taxiEnd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taxiEnd;
            T& operator()() { return taxiEnd; }
            const T& operator()() const { return taxiEnd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MountSpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mountSpell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mountSpell;
            T& operator()() { return mountSpell; }
            const T& operator()() const { return mountSpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterBattlegroundData: sqlpp::table_t<CharacterBattlegroundData,
               CharacterBattlegroundData_::Guid,
               CharacterBattlegroundData_::InstanceId,
               CharacterBattlegroundData_::Team,
               CharacterBattlegroundData_::JoinX,
               CharacterBattlegroundData_::JoinY,
               CharacterBattlegroundData_::JoinZ,
               CharacterBattlegroundData_::JoinO,
               CharacterBattlegroundData_::JoinMapId,
               CharacterBattlegroundData_::TaxiStart,
               CharacterBattlegroundData_::TaxiEnd,
               CharacterBattlegroundData_::MountSpell>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_battleground_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterBattlegroundData;
        T& operator()() { return characterBattlegroundData; }
        const T& operator()() const { return characterBattlegroundData; }
      };
    };
  };
  namespace CharacterBattlegroundRandom_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct CharacterBattlegroundRandom: sqlpp::table_t<CharacterBattlegroundRandom,
               CharacterBattlegroundRandom_::Guid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_battleground_random";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterBattlegroundRandom;
        T& operator()() { return characterBattlegroundRandom; }
        const T& operator()() const { return characterBattlegroundRandom; }
      };
    };
  };
  namespace CharacterCufProfiles_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct FrameHeight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "frameHeight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T frameHeight;
            T& operator()() { return frameHeight; }
            const T& operator()() const { return frameHeight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct FrameWidth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "frameWidth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T frameWidth;
            T& operator()() { return frameWidth; }
            const T& operator()() const { return frameWidth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct SortBy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sortBy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sortBy;
            T& operator()() { return sortBy; }
            const T& operator()() const { return sortBy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct HealthText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "healthText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T healthText;
            T& operator()() { return healthText; }
            const T& operator()() const { return healthText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BoolOptions
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "boolOptions";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boolOptions;
            T& operator()() { return boolOptions; }
            const T& operator()() const { return boolOptions; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TopPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "topPoint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T topPoint;
            T& operator()() { return topPoint; }
            const T& operator()() const { return topPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BottomPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bottomPoint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bottomPoint;
            T& operator()() { return bottomPoint; }
            const T& operator()() const { return bottomPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LeftPoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leftPoint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leftPoint;
            T& operator()() { return leftPoint; }
            const T& operator()() const { return leftPoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct TopOffset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "topOffset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T topOffset;
            T& operator()() { return topOffset; }
            const T& operator()() const { return topOffset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct BottomOffset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bottomOffset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bottomOffset;
            T& operator()() { return bottomOffset; }
            const T& operator()() const { return bottomOffset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct LeftOffset
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leftOffset";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leftOffset;
            T& operator()() { return leftOffset; }
            const T& operator()() const { return leftOffset; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct CharacterCufProfiles: sqlpp::table_t<CharacterCufProfiles,
               CharacterCufProfiles_::Guid,
               CharacterCufProfiles_::Id,
               CharacterCufProfiles_::Name,
               CharacterCufProfiles_::FrameHeight,
               CharacterCufProfiles_::FrameWidth,
               CharacterCufProfiles_::SortBy,
               CharacterCufProfiles_::HealthText,
               CharacterCufProfiles_::BoolOptions,
               CharacterCufProfiles_::TopPoint,
               CharacterCufProfiles_::BottomPoint,
               CharacterCufProfiles_::LeftPoint,
               CharacterCufProfiles_::TopOffset,
               CharacterCufProfiles_::BottomOffset,
               CharacterCufProfiles_::LeftOffset>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_cuf_profiles";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterCufProfiles;
        T& operator()() { return characterCufProfiles; }
        const T& operator()() const { return characterCufProfiles; }
      };
    };
  };
  namespace CharacterCurrency_
  {
    struct CharacterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CharacterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CharacterGuid;
            T& operator()() { return CharacterGuid; }
            const T& operator()() const { return CharacterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Currency
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Currency";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Currency;
            T& operator()() { return Currency; }
            const T& operator()() const { return Currency; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct Quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Quantity;
            T& operator()() { return Quantity; }
            const T& operator()() const { return Quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct WeeklyQuantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "WeeklyQuantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WeeklyQuantity;
            T& operator()() { return WeeklyQuantity; }
            const T& operator()() const { return WeeklyQuantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TrackedQuantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TrackedQuantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TrackedQuantity;
            T& operator()() { return TrackedQuantity; }
            const T& operator()() const { return TrackedQuantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
  }

  struct CharacterCurrency: sqlpp::table_t<CharacterCurrency,
               CharacterCurrency_::CharacterGuid,
               CharacterCurrency_::Currency,
               CharacterCurrency_::Quantity,
               CharacterCurrency_::WeeklyQuantity,
               CharacterCurrency_::TrackedQuantity,
               CharacterCurrency_::Flags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_currency";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterCurrency;
        T& operator()() { return characterCurrency; }
        const T& operator()() const { return characterCurrency; }
      };
    };
  };
  namespace CharacterDeclinedname_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Genitive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "genitive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T genitive;
            T& operator()() { return genitive; }
            const T& operator()() const { return genitive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Dative
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dative";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dative;
            T& operator()() { return dative; }
            const T& operator()() const { return dative; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Accusative
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accusative";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accusative;
            T& operator()() { return accusative; }
            const T& operator()() const { return accusative; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Instrumental
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instrumental";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instrumental;
            T& operator()() { return instrumental; }
            const T& operator()() const { return instrumental; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Prepositional
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prepositional";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prepositional;
            T& operator()() { return prepositional; }
            const T& operator()() const { return prepositional; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct CharacterDeclinedname: sqlpp::table_t<CharacterDeclinedname,
               CharacterDeclinedname_::Guid,
               CharacterDeclinedname_::Genitive,
               CharacterDeclinedname_::Dative,
               CharacterDeclinedname_::Accusative,
               CharacterDeclinedname_::Instrumental,
               CharacterDeclinedname_::Prepositional>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_declinedname";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterDeclinedname;
        T& operator()() { return characterDeclinedname; }
        const T& operator()() const { return characterDeclinedname; }
      };
    };
  };
  namespace CharacterEquipmentsets_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Setguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "setguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setguid;
            T& operator()() { return setguid; }
            const T& operator()() const { return setguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Setindex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "setindex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setindex;
            T& operator()() { return setindex; }
            const T& operator()() const { return setindex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Iconname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "iconname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iconname;
            T& operator()() { return iconname; }
            const T& operator()() const { return iconname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct IgnoreMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ignore_mask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ignoreMask;
            T& operator()() { return ignoreMask; }
            const T& operator()() const { return ignoreMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Item0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item0;
            T& operator()() { return item0; }
            const T& operator()() const { return item0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item1;
            T& operator()() { return item1; }
            const T& operator()() const { return item1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item2;
            T& operator()() { return item2; }
            const T& operator()() const { return item2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item3;
            T& operator()() { return item3; }
            const T& operator()() const { return item3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item4;
            T& operator()() { return item4; }
            const T& operator()() const { return item4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item5;
            T& operator()() { return item5; }
            const T& operator()() const { return item5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item6;
            T& operator()() { return item6; }
            const T& operator()() const { return item6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item7;
            T& operator()() { return item7; }
            const T& operator()() const { return item7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item8;
            T& operator()() { return item8; }
            const T& operator()() const { return item8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item9;
            T& operator()() { return item9; }
            const T& operator()() const { return item9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item10;
            T& operator()() { return item10; }
            const T& operator()() const { return item10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item11
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item11";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item11;
            T& operator()() { return item11; }
            const T& operator()() const { return item11; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item12
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item12";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item12;
            T& operator()() { return item12; }
            const T& operator()() const { return item12; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item13
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item13";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item13;
            T& operator()() { return item13; }
            const T& operator()() const { return item13; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item14
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item14";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item14;
            T& operator()() { return item14; }
            const T& operator()() const { return item14; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item15
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item15";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item15;
            T& operator()() { return item15; }
            const T& operator()() const { return item15; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item16
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item16";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item16;
            T& operator()() { return item16; }
            const T& operator()() const { return item16; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item17
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item17";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item17;
            T& operator()() { return item17; }
            const T& operator()() const { return item17; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Item18
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item18";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item18;
            T& operator()() { return item18; }
            const T& operator()() const { return item18; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct CharacterEquipmentsets: sqlpp::table_t<CharacterEquipmentsets,
               CharacterEquipmentsets_::Guid,
               CharacterEquipmentsets_::Setguid,
               CharacterEquipmentsets_::Setindex,
               CharacterEquipmentsets_::Name,
               CharacterEquipmentsets_::Iconname,
               CharacterEquipmentsets_::IgnoreMask,
               CharacterEquipmentsets_::Item0,
               CharacterEquipmentsets_::Item1,
               CharacterEquipmentsets_::Item2,
               CharacterEquipmentsets_::Item3,
               CharacterEquipmentsets_::Item4,
               CharacterEquipmentsets_::Item5,
               CharacterEquipmentsets_::Item6,
               CharacterEquipmentsets_::Item7,
               CharacterEquipmentsets_::Item8,
               CharacterEquipmentsets_::Item9,
               CharacterEquipmentsets_::Item10,
               CharacterEquipmentsets_::Item11,
               CharacterEquipmentsets_::Item12,
               CharacterEquipmentsets_::Item13,
               CharacterEquipmentsets_::Item14,
               CharacterEquipmentsets_::Item15,
               CharacterEquipmentsets_::Item16,
               CharacterEquipmentsets_::Item17,
               CharacterEquipmentsets_::Item18>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_equipmentsets";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterEquipmentsets;
        T& operator()() { return characterEquipmentsets; }
        const T& operator()() const { return characterEquipmentsets; }
      };
    };
  };
  namespace CharacterGarrison_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct SiteLevelId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "siteLevelId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T siteLevelId;
            T& operator()() { return siteLevelId; }
            const T& operator()() const { return siteLevelId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct FollowerActivationsRemainingToday
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "followerActivationsRemainingToday";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T followerActivationsRemainingToday;
            T& operator()() { return followerActivationsRemainingToday; }
            const T& operator()() const { return followerActivationsRemainingToday; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterGarrison: sqlpp::table_t<CharacterGarrison,
               CharacterGarrison_::Guid,
               CharacterGarrison_::SiteLevelId,
               CharacterGarrison_::FollowerActivationsRemainingToday>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_garrison";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGarrison;
        T& operator()() { return characterGarrison; }
        const T& operator()() const { return characterGarrison; }
      };
    };
  };
  namespace CharacterGarrisonBlueprints_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct BuildingId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "buildingId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T buildingId;
            T& operator()() { return buildingId; }
            const T& operator()() const { return buildingId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterGarrisonBlueprints: sqlpp::table_t<CharacterGarrisonBlueprints,
               CharacterGarrisonBlueprints_::Guid,
               CharacterGarrisonBlueprints_::BuildingId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_garrison_blueprints";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGarrisonBlueprints;
        T& operator()() { return characterGarrisonBlueprints; }
        const T& operator()() const { return characterGarrisonBlueprints; }
      };
    };
  };
  namespace CharacterGarrisonBuildings_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct PlotInstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "plotInstanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T plotInstanceId;
            T& operator()() { return plotInstanceId; }
            const T& operator()() const { return plotInstanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BuildingId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "buildingId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T buildingId;
            T& operator()() { return buildingId; }
            const T& operator()() const { return buildingId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TimeBuilt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timeBuilt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timeBuilt;
            T& operator()() { return timeBuilt; }
            const T& operator()() const { return timeBuilt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterGarrisonBuildings: sqlpp::table_t<CharacterGarrisonBuildings,
               CharacterGarrisonBuildings_::Guid,
               CharacterGarrisonBuildings_::PlotInstanceId,
               CharacterGarrisonBuildings_::BuildingId,
               CharacterGarrisonBuildings_::TimeBuilt,
               CharacterGarrisonBuildings_::Active>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_garrison_buildings";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGarrisonBuildings;
        T& operator()() { return characterGarrisonBuildings; }
        const T& operator()() const { return characterGarrisonBuildings; }
      };
    };
  };
  namespace CharacterGarrisonFollowerAbilities_
  {
    struct DbId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dbId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dbId;
            T& operator()() { return dbId; }
            const T& operator()() const { return dbId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct AbilityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abilityId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilityId;
            T& operator()() { return abilityId; }
            const T& operator()() const { return abilityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterGarrisonFollowerAbilities: sqlpp::table_t<CharacterGarrisonFollowerAbilities,
               CharacterGarrisonFollowerAbilities_::DbId,
               CharacterGarrisonFollowerAbilities_::AbilityId,
               CharacterGarrisonFollowerAbilities_::Slot>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_garrison_follower_abilities";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGarrisonFollowerAbilities;
        T& operator()() { return characterGarrisonFollowerAbilities; }
        const T& operator()() const { return characterGarrisonFollowerAbilities; }
      };
    };
  };
  namespace CharacterGarrisonFollowers_
  {
    struct DbId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dbId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dbId;
            T& operator()() { return dbId; }
            const T& operator()() const { return dbId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct FollowerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "followerId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T followerId;
            T& operator()() { return followerId; }
            const T& operator()() const { return followerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Quality
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quality";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quality;
            T& operator()() { return quality; }
            const T& operator()() const { return quality; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemLevelWeapon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemLevelWeapon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemLevelWeapon;
            T& operator()() { return itemLevelWeapon; }
            const T& operator()() const { return itemLevelWeapon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemLevelArmor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemLevelArmor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemLevelArmor;
            T& operator()() { return itemLevelArmor; }
            const T& operator()() const { return itemLevelArmor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Xp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xp;
            T& operator()() { return xp; }
            const T& operator()() const { return xp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CurrentBuilding
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "currentBuilding";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentBuilding;
            T& operator()() { return currentBuilding; }
            const T& operator()() const { return currentBuilding; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CurrentMission
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "currentMission";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentMission;
            T& operator()() { return currentMission; }
            const T& operator()() const { return currentMission; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterGarrisonFollowers: sqlpp::table_t<CharacterGarrisonFollowers,
               CharacterGarrisonFollowers_::DbId,
               CharacterGarrisonFollowers_::Guid,
               CharacterGarrisonFollowers_::FollowerId,
               CharacterGarrisonFollowers_::Quality,
               CharacterGarrisonFollowers_::Level,
               CharacterGarrisonFollowers_::ItemLevelWeapon,
               CharacterGarrisonFollowers_::ItemLevelArmor,
               CharacterGarrisonFollowers_::Xp,
               CharacterGarrisonFollowers_::CurrentBuilding,
               CharacterGarrisonFollowers_::CurrentMission,
               CharacterGarrisonFollowers_::Status>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_garrison_followers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGarrisonFollowers;
        T& operator()() { return characterGarrisonFollowers; }
        const T& operator()() const { return characterGarrisonFollowers; }
      };
    };
  };
  namespace CharacterGifts_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterGifts: sqlpp::table_t<CharacterGifts,
               CharacterGifts_::Guid,
               CharacterGifts_::ItemGuid,
               CharacterGifts_::Entry,
               CharacterGifts_::Flags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_gifts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGifts;
        T& operator()() { return characterGifts; }
        const T& operator()() const { return characterGifts; }
      };
    };
  };
  namespace CharacterGlyphs_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct TalentGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "talentGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T talentGroup;
            T& operator()() { return talentGroup; }
            const T& operator()() const { return talentGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct GlyphId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "glyphId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T glyphId;
            T& operator()() { return glyphId; }
            const T& operator()() const { return glyphId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct CharacterGlyphs: sqlpp::table_t<CharacterGlyphs,
               CharacterGlyphs_::Guid,
               CharacterGlyphs_::TalentGroup,
               CharacterGlyphs_::GlyphId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_glyphs";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterGlyphs;
        T& operator()() { return characterGlyphs; }
        const T& operator()() const { return characterGlyphs; }
      };
    };
  };
  namespace CharacterHomebind_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct ZoneId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zoneId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneId;
            T& operator()() { return zoneId; }
            const T& operator()() const { return zoneId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PosX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posX;
            T& operator()() { return posX; }
            const T& operator()() const { return posX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posY;
            T& operator()() { return posY; }
            const T& operator()() const { return posY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posZ;
            T& operator()() { return posZ; }
            const T& operator()() const { return posZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct CharacterHomebind: sqlpp::table_t<CharacterHomebind,
               CharacterHomebind_::Guid,
               CharacterHomebind_::MapId,
               CharacterHomebind_::ZoneId,
               CharacterHomebind_::PosX,
               CharacterHomebind_::PosY,
               CharacterHomebind_::PosZ>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_homebind";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterHomebind;
        T& operator()() { return characterHomebind; }
        const T& operator()() const { return characterHomebind; }
      };
    };
  };
  namespace CharacterInstance_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Instance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instance;
            T& operator()() { return instance; }
            const T& operator()() const { return instance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Permanent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "permanent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permanent;
            T& operator()() { return permanent; }
            const T& operator()() const { return permanent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ExtendState
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "extendState";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T extendState;
            T& operator()() { return extendState; }
            const T& operator()() const { return extendState; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterInstance: sqlpp::table_t<CharacterInstance,
               CharacterInstance_::Guid,
               CharacterInstance_::Instance,
               CharacterInstance_::Permanent,
               CharacterInstance_::ExtendState>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_instance";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterInstance;
        T& operator()() { return characterInstance; }
        const T& operator()() const { return characterInstance; }
      };
    };
  };
  namespace CharacterInventory_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Bag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bag;
            T& operator()() { return bag; }
            const T& operator()() const { return bag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item;
            T& operator()() { return item; }
            const T& operator()() const { return item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct CharacterInventory: sqlpp::table_t<CharacterInventory,
               CharacterInventory_::Guid,
               CharacterInventory_::Bag,
               CharacterInventory_::Slot,
               CharacterInventory_::Item>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_inventory";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterInventory;
        T& operator()() { return characterInventory; }
        const T& operator()() const { return characterInventory; }
      };
    };
  };
  namespace CharacterPet_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Owner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "owner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T owner;
            T& operator()() { return owner; }
            const T& operator()() const { return owner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Modelid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "modelid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid;
            T& operator()() { return modelid; }
            const T& operator()() const { return modelid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct CreatedBySpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "CreatedBySpell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CreatedBySpell;
            T& operator()() { return CreatedBySpell; }
            const T& operator()() const { return CreatedBySpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PetType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "PetType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PetType;
            T& operator()() { return PetType; }
            const T& operator()() const { return PetType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Exp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "exp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exp;
            T& operator()() { return exp; }
            const T& operator()() const { return exp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Reactstate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Reactstate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reactstate;
            T& operator()() { return Reactstate; }
            const T& operator()() const { return Reactstate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Renamed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "renamed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T renamed;
            T& operator()() { return renamed; }
            const T& operator()() const { return renamed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Curhealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "curhealth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T curhealth;
            T& operator()() { return curhealth; }
            const T& operator()() const { return curhealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Curmana
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "curmana";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T curmana;
            T& operator()() { return curmana; }
            const T& operator()() const { return curmana; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Savetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "savetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T savetime;
            T& operator()() { return savetime; }
            const T& operator()() const { return savetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Abdata
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "abdata";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abdata;
            T& operator()() { return abdata; }
            const T& operator()() const { return abdata; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Specialization
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "specialization";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T specialization;
            T& operator()() { return specialization; }
            const T& operator()() const { return specialization; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct CharacterPet: sqlpp::table_t<CharacterPet,
               CharacterPet_::Id,
               CharacterPet_::Entry,
               CharacterPet_::Owner,
               CharacterPet_::Modelid,
               CharacterPet_::CreatedBySpell,
               CharacterPet_::PetType,
               CharacterPet_::Level,
               CharacterPet_::Exp,
               CharacterPet_::Reactstate,
               CharacterPet_::Name,
               CharacterPet_::Renamed,
               CharacterPet_::Slot,
               CharacterPet_::Curhealth,
               CharacterPet_::Curmana,
               CharacterPet_::Savetime,
               CharacterPet_::Abdata,
               CharacterPet_::Specialization>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_pet";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterPet;
        T& operator()() { return characterPet; }
        const T& operator()() const { return characterPet; }
      };
    };
  };
  namespace CharacterPetDeclinedname_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Owner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "owner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T owner;
            T& operator()() { return owner; }
            const T& operator()() const { return owner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Genitive
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "genitive";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T genitive;
            T& operator()() { return genitive; }
            const T& operator()() const { return genitive; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Dative
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dative";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dative;
            T& operator()() { return dative; }
            const T& operator()() const { return dative; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Accusative
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "accusative";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accusative;
            T& operator()() { return accusative; }
            const T& operator()() const { return accusative; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Instrumental
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instrumental";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instrumental;
            T& operator()() { return instrumental; }
            const T& operator()() const { return instrumental; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Prepositional
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "prepositional";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prepositional;
            T& operator()() { return prepositional; }
            const T& operator()() const { return prepositional; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct CharacterPetDeclinedname: sqlpp::table_t<CharacterPetDeclinedname,
               CharacterPetDeclinedname_::Id,
               CharacterPetDeclinedname_::Owner,
               CharacterPetDeclinedname_::Genitive,
               CharacterPetDeclinedname_::Dative,
               CharacterPetDeclinedname_::Accusative,
               CharacterPetDeclinedname_::Instrumental,
               CharacterPetDeclinedname_::Prepositional>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_pet_declinedname";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterPetDeclinedname;
        T& operator()() { return characterPetDeclinedname; }
        const T& operator()() const { return characterPetDeclinedname; }
      };
    };
  };
  namespace CharacterQueststatus_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Status
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T status;
            T& operator()() { return status; }
            const T& operator()() const { return status; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Timer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timer";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timer;
            T& operator()() { return timer; }
            const T& operator()() const { return timer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterQueststatus: sqlpp::table_t<CharacterQueststatus,
               CharacterQueststatus_::Guid,
               CharacterQueststatus_::Quest,
               CharacterQueststatus_::Status,
               CharacterQueststatus_::Timer>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatus;
        T& operator()() { return characterQueststatus; }
        const T& operator()() const { return characterQueststatus; }
      };
    };
  };
  namespace CharacterQueststatusDaily_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterQueststatusDaily: sqlpp::table_t<CharacterQueststatusDaily,
               CharacterQueststatusDaily_::Guid,
               CharacterQueststatusDaily_::Quest,
               CharacterQueststatusDaily_::Time>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus_daily";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatusDaily;
        T& operator()() { return characterQueststatusDaily; }
        const T& operator()() const { return characterQueststatusDaily; }
      };
    };
  };
  namespace CharacterQueststatusMonthly_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterQueststatusMonthly: sqlpp::table_t<CharacterQueststatusMonthly,
               CharacterQueststatusMonthly_::Guid,
               CharacterQueststatusMonthly_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus_monthly";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatusMonthly;
        T& operator()() { return characterQueststatusMonthly; }
        const T& operator()() const { return characterQueststatusMonthly; }
      };
    };
  };
  namespace CharacterQueststatusObjectives_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Objective
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "objective";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T objective;
            T& operator()() { return objective; }
            const T& operator()() const { return objective; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Data
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T data;
            T& operator()() { return data; }
            const T& operator()() const { return data; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterQueststatusObjectives: sqlpp::table_t<CharacterQueststatusObjectives,
               CharacterQueststatusObjectives_::Guid,
               CharacterQueststatusObjectives_::Quest,
               CharacterQueststatusObjectives_::Objective,
               CharacterQueststatusObjectives_::Data>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus_objectives";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatusObjectives;
        T& operator()() { return characterQueststatusObjectives; }
        const T& operator()() const { return characterQueststatusObjectives; }
      };
    };
  };
  namespace CharacterQueststatusRewarded_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterQueststatusRewarded: sqlpp::table_t<CharacterQueststatusRewarded,
               CharacterQueststatusRewarded_::Guid,
               CharacterQueststatusRewarded_::Quest,
               CharacterQueststatusRewarded_::Active>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus_rewarded";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatusRewarded;
        T& operator()() { return characterQueststatusRewarded; }
        const T& operator()() const { return characterQueststatusRewarded; }
      };
    };
  };
  namespace CharacterQueststatusSeasonal_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Event
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "event";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T event;
            T& operator()() { return event; }
            const T& operator()() const { return event; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterQueststatusSeasonal: sqlpp::table_t<CharacterQueststatusSeasonal,
               CharacterQueststatusSeasonal_::Guid,
               CharacterQueststatusSeasonal_::Quest,
               CharacterQueststatusSeasonal_::Event>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus_seasonal";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatusSeasonal;
        T& operator()() { return characterQueststatusSeasonal; }
        const T& operator()() const { return characterQueststatusSeasonal; }
      };
    };
  };
  namespace CharacterQueststatusWeekly_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterQueststatusWeekly: sqlpp::table_t<CharacterQueststatusWeekly,
               CharacterQueststatusWeekly_::Guid,
               CharacterQueststatusWeekly_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_queststatus_weekly";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterQueststatusWeekly;
        T& operator()() { return characterQueststatusWeekly; }
        const T& operator()() const { return characterQueststatusWeekly; }
      };
    };
  };
  namespace CharacterReputation_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Faction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction;
            T& operator()() { return faction; }
            const T& operator()() const { return faction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Standing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "standing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T standing;
            T& operator()() { return standing; }
            const T& operator()() const { return standing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct CharacterReputation: sqlpp::table_t<CharacterReputation,
               CharacterReputation_::Guid,
               CharacterReputation_::Faction,
               CharacterReputation_::Standing,
               CharacterReputation_::Flags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_reputation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterReputation;
        T& operator()() { return characterReputation; }
        const T& operator()() const { return characterReputation; }
      };
    };
  };
  namespace CharacterSkills_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Skill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skill;
            T& operator()() { return skill; }
            const T& operator()() const { return skill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct Max
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "max";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T max;
            T& operator()() { return max; }
            const T& operator()() const { return max; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
  }

  struct CharacterSkills: sqlpp::table_t<CharacterSkills,
               CharacterSkills_::Guid,
               CharacterSkills_::Skill,
               CharacterSkills_::Value,
               CharacterSkills_::Max>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_skills";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterSkills;
        T& operator()() { return characterSkills; }
        const T& operator()() const { return characterSkills; }
      };
    };
  };
  namespace CharacterSocial_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Friend
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "friend";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T friend_;
            T& operator()() { return friend_; }
            const T& operator()() const { return friend_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct CharacterSocial: sqlpp::table_t<CharacterSocial,
               CharacterSocial_::Guid,
               CharacterSocial_::Friend,
               CharacterSocial_::Flags,
               CharacterSocial_::Note>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_social";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterSocial;
        T& operator()() { return characterSocial; }
        const T& operator()() const { return characterSocial; }
      };
    };
  };
  namespace CharacterSpell_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Disabled
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "disabled";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T disabled;
            T& operator()() { return disabled; }
            const T& operator()() const { return disabled; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterSpell: sqlpp::table_t<CharacterSpell,
               CharacterSpell_::Guid,
               CharacterSpell_::Spell,
               CharacterSpell_::Active,
               CharacterSpell_::Disabled>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_spell";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterSpell;
        T& operator()() { return characterSpell; }
        const T& operator()() const { return characterSpell; }
      };
    };
  };
  namespace CharacterSpellCharges_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct CategoryId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categoryId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryId;
            T& operator()() { return categoryId; }
            const T& operator()() const { return categoryId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RechargeStart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rechargeStart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rechargeStart;
            T& operator()() { return rechargeStart; }
            const T& operator()() const { return rechargeStart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RechargeEnd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rechargeEnd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rechargeEnd;
            T& operator()() { return rechargeEnd; }
            const T& operator()() const { return rechargeEnd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterSpellCharges: sqlpp::table_t<CharacterSpellCharges,
               CharacterSpellCharges_::Guid,
               CharacterSpellCharges_::CategoryId,
               CharacterSpellCharges_::RechargeStart,
               CharacterSpellCharges_::RechargeEnd>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_spell_charges";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterSpellCharges;
        T& operator()() { return characterSpellCharges; }
        const T& operator()() const { return characterSpellCharges; }
      };
    };
  };
  namespace CharacterSpellCooldown_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item;
            T& operator()() { return item; }
            const T& operator()() const { return item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CategoryId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categoryId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryId;
            T& operator()() { return categoryId; }
            const T& operator()() const { return categoryId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CategoryEnd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categoryEnd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryEnd;
            T& operator()() { return categoryEnd; }
            const T& operator()() const { return categoryEnd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterSpellCooldown: sqlpp::table_t<CharacterSpellCooldown,
               CharacterSpellCooldown_::Guid,
               CharacterSpellCooldown_::Spell,
               CharacterSpellCooldown_::Item,
               CharacterSpellCooldown_::Time,
               CharacterSpellCooldown_::CategoryId,
               CharacterSpellCooldown_::CategoryEnd>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_spell_cooldown";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterSpellCooldown;
        T& operator()() { return characterSpellCooldown; }
        const T& operator()() const { return characterSpellCooldown; }
      };
    };
  };
  namespace CharacterStats_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Maxhealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxhealth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxhealth;
            T& operator()() { return maxhealth; }
            const T& operator()() const { return maxhealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxpower1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxpower1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxpower1;
            T& operator()() { return maxpower1; }
            const T& operator()() const { return maxpower1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxpower2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxpower2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxpower2;
            T& operator()() { return maxpower2; }
            const T& operator()() const { return maxpower2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxpower3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxpower3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxpower3;
            T& operator()() { return maxpower3; }
            const T& operator()() const { return maxpower3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxpower4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxpower4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxpower4;
            T& operator()() { return maxpower4; }
            const T& operator()() const { return maxpower4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxpower5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxpower5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxpower5;
            T& operator()() { return maxpower5; }
            const T& operator()() const { return maxpower5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxpower6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxpower6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxpower6;
            T& operator()() { return maxpower6; }
            const T& operator()() const { return maxpower6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Strength
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "strength";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T strength;
            T& operator()() { return strength; }
            const T& operator()() const { return strength; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Agility
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "agility";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T agility;
            T& operator()() { return agility; }
            const T& operator()() const { return agility; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Stamina
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stamina";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stamina;
            T& operator()() { return stamina; }
            const T& operator()() const { return stamina; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Intellect
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "intellect";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T intellect;
            T& operator()() { return intellect; }
            const T& operator()() const { return intellect; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Armor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "armor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T armor;
            T& operator()() { return armor; }
            const T& operator()() const { return armor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResHoly
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resHoly";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resHoly;
            T& operator()() { return resHoly; }
            const T& operator()() const { return resHoly; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResFire
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resFire";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resFire;
            T& operator()() { return resFire; }
            const T& operator()() const { return resFire; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResNature
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resNature";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resNature;
            T& operator()() { return resNature; }
            const T& operator()() const { return resNature; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResFrost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resFrost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resFrost;
            T& operator()() { return resFrost; }
            const T& operator()() const { return resFrost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResShadow
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resShadow";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resShadow;
            T& operator()() { return resShadow; }
            const T& operator()() const { return resShadow; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResArcane
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resArcane";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resArcane;
            T& operator()() { return resArcane; }
            const T& operator()() const { return resArcane; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BlockPct
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "blockPct";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blockPct;
            T& operator()() { return blockPct; }
            const T& operator()() const { return blockPct; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DodgePct
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dodgePct";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dodgePct;
            T& operator()() { return dodgePct; }
            const T& operator()() const { return dodgePct; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ParryPct
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "parryPct";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parryPct;
            T& operator()() { return parryPct; }
            const T& operator()() const { return parryPct; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct CritPct
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "critPct";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T critPct;
            T& operator()() { return critPct; }
            const T& operator()() const { return critPct; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RangedCritPct
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rangedCritPct";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rangedCritPct;
            T& operator()() { return rangedCritPct; }
            const T& operator()() const { return rangedCritPct; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct SpellCritPct
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellCritPct";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellCritPct;
            T& operator()() { return spellCritPct; }
            const T& operator()() const { return spellCritPct; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct AttackPower
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attackPower";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attackPower;
            T& operator()() { return attackPower; }
            const T& operator()() const { return attackPower; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RangedAttackPower
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rangedAttackPower";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rangedAttackPower;
            T& operator()() { return rangedAttackPower; }
            const T& operator()() const { return rangedAttackPower; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SpellPower
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellPower";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellPower;
            T& operator()() { return spellPower; }
            const T& operator()() const { return spellPower; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Resilience
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resilience";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resilience;
            T& operator()() { return resilience; }
            const T& operator()() const { return resilience; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterStats: sqlpp::table_t<CharacterStats,
               CharacterStats_::Guid,
               CharacterStats_::Maxhealth,
               CharacterStats_::Maxpower1,
               CharacterStats_::Maxpower2,
               CharacterStats_::Maxpower3,
               CharacterStats_::Maxpower4,
               CharacterStats_::Maxpower5,
               CharacterStats_::Maxpower6,
               CharacterStats_::Strength,
               CharacterStats_::Agility,
               CharacterStats_::Stamina,
               CharacterStats_::Intellect,
               CharacterStats_::Armor,
               CharacterStats_::ResHoly,
               CharacterStats_::ResFire,
               CharacterStats_::ResNature,
               CharacterStats_::ResFrost,
               CharacterStats_::ResShadow,
               CharacterStats_::ResArcane,
               CharacterStats_::BlockPct,
               CharacterStats_::DodgePct,
               CharacterStats_::ParryPct,
               CharacterStats_::CritPct,
               CharacterStats_::RangedCritPct,
               CharacterStats_::SpellCritPct,
               CharacterStats_::AttackPower,
               CharacterStats_::RangedAttackPower,
               CharacterStats_::SpellPower,
               CharacterStats_::Resilience>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_stats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterStats;
        T& operator()() { return characterStats; }
        const T& operator()() const { return characterStats; }
      };
    };
  };
  namespace CharacterTalent_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct TalentGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "talentGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T talentGroup;
            T& operator()() { return talentGroup; }
            const T& operator()() const { return talentGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterTalent: sqlpp::table_t<CharacterTalent,
               CharacterTalent_::Guid,
               CharacterTalent_::Spell,
               CharacterTalent_::TalentGroup>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_talent";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterTalent;
        T& operator()() { return characterTalent; }
        const T& operator()() const { return characterTalent; }
      };
    };
  };
  namespace CharacterTemplate_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct CharacterTemplate: sqlpp::table_t<CharacterTemplate,
               CharacterTemplate_::Id,
               CharacterTemplate_::Name,
               CharacterTemplate_::Description,
               CharacterTemplate_::Level>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterTemplate;
        T& operator()() { return characterTemplate; }
        const T& operator()() const { return characterTemplate; }
      };
    };
  };
  namespace CharacterTemplateClass_
  {
    struct TemplateId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "templateId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T templateId;
            T& operator()() { return templateId; }
            const T& operator()() const { return templateId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct FactionGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "factionGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T factionGroup;
            T& operator()() { return factionGroup; }
            const T& operator()() const { return factionGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
  }

  struct CharacterTemplateClass: sqlpp::table_t<CharacterTemplateClass,
               CharacterTemplateClass_::TemplateId,
               CharacterTemplateClass_::FactionGroup,
               CharacterTemplateClass_::Class>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_template_class";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterTemplateClass;
        T& operator()() { return characterTemplateClass; }
        const T& operator()() const { return characterTemplateClass; }
      };
    };
  };
  namespace CharacterTransmogOutfits_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Setguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "setguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setguid;
            T& operator()() { return setguid; }
            const T& operator()() const { return setguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Setindex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "setindex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T setindex;
            T& operator()() { return setindex; }
            const T& operator()() const { return setindex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Iconname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "iconname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T iconname;
            T& operator()() { return iconname; }
            const T& operator()() const { return iconname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct IgnoreMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ignore_mask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ignoreMask;
            T& operator()() { return ignoreMask; }
            const T& operator()() const { return ignoreMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance0;
            T& operator()() { return appearance0; }
            const T& operator()() const { return appearance0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance1;
            T& operator()() { return appearance1; }
            const T& operator()() const { return appearance1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance2;
            T& operator()() { return appearance2; }
            const T& operator()() const { return appearance2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance3;
            T& operator()() { return appearance3; }
            const T& operator()() const { return appearance3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance4;
            T& operator()() { return appearance4; }
            const T& operator()() const { return appearance4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance5;
            T& operator()() { return appearance5; }
            const T& operator()() const { return appearance5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance6;
            T& operator()() { return appearance6; }
            const T& operator()() const { return appearance6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance7;
            T& operator()() { return appearance7; }
            const T& operator()() const { return appearance7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance8;
            T& operator()() { return appearance8; }
            const T& operator()() const { return appearance8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance9;
            T& operator()() { return appearance9; }
            const T& operator()() const { return appearance9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance10;
            T& operator()() { return appearance10; }
            const T& operator()() const { return appearance10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance11
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance11";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance11;
            T& operator()() { return appearance11; }
            const T& operator()() const { return appearance11; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance12
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance12";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance12;
            T& operator()() { return appearance12; }
            const T& operator()() const { return appearance12; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance13
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance13";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance13;
            T& operator()() { return appearance13; }
            const T& operator()() const { return appearance13; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance14
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance14";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance14;
            T& operator()() { return appearance14; }
            const T& operator()() const { return appearance14; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance15
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance15";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance15;
            T& operator()() { return appearance15; }
            const T& operator()() const { return appearance15; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance16
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance16";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance16;
            T& operator()() { return appearance16; }
            const T& operator()() const { return appearance16; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance17
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance17";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance17;
            T& operator()() { return appearance17; }
            const T& operator()() const { return appearance17; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Appearance18
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "appearance18";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearance18;
            T& operator()() { return appearance18; }
            const T& operator()() const { return appearance18; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MainHandEnchant
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mainHandEnchant";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mainHandEnchant;
            T& operator()() { return mainHandEnchant; }
            const T& operator()() const { return mainHandEnchant; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct OffHandEnchant
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "offHandEnchant";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T offHandEnchant;
            T& operator()() { return offHandEnchant; }
            const T& operator()() const { return offHandEnchant; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CharacterTransmogOutfits: sqlpp::table_t<CharacterTransmogOutfits,
               CharacterTransmogOutfits_::Guid,
               CharacterTransmogOutfits_::Setguid,
               CharacterTransmogOutfits_::Setindex,
               CharacterTransmogOutfits_::Name,
               CharacterTransmogOutfits_::Iconname,
               CharacterTransmogOutfits_::IgnoreMask,
               CharacterTransmogOutfits_::Appearance0,
               CharacterTransmogOutfits_::Appearance1,
               CharacterTransmogOutfits_::Appearance2,
               CharacterTransmogOutfits_::Appearance3,
               CharacterTransmogOutfits_::Appearance4,
               CharacterTransmogOutfits_::Appearance5,
               CharacterTransmogOutfits_::Appearance6,
               CharacterTransmogOutfits_::Appearance7,
               CharacterTransmogOutfits_::Appearance8,
               CharacterTransmogOutfits_::Appearance9,
               CharacterTransmogOutfits_::Appearance10,
               CharacterTransmogOutfits_::Appearance11,
               CharacterTransmogOutfits_::Appearance12,
               CharacterTransmogOutfits_::Appearance13,
               CharacterTransmogOutfits_::Appearance14,
               CharacterTransmogOutfits_::Appearance15,
               CharacterTransmogOutfits_::Appearance16,
               CharacterTransmogOutfits_::Appearance17,
               CharacterTransmogOutfits_::Appearance18,
               CharacterTransmogOutfits_::MainHandEnchant,
               CharacterTransmogOutfits_::OffHandEnchant>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_transmog_outfits";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterTransmogOutfits;
        T& operator()() { return characterTransmogOutfits; }
        const T& operator()() const { return characterTransmogOutfits; }
      };
    };
  };
  namespace CharacterVoidStorage_
  {
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerGuid;
            T& operator()() { return playerGuid; }
            const T& operator()() const { return playerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct ItemEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemEntry;
            T& operator()() { return itemEntry; }
            const T& operator()() const { return itemEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct CreatorGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "creatorGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creatorGuid;
            T& operator()() { return creatorGuid; }
            const T& operator()() const { return creatorGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct RandomProperty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "randomProperty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T randomProperty;
            T& operator()() { return randomProperty; }
            const T& operator()() const { return randomProperty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SuffixFactor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "suffixFactor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T suffixFactor;
            T& operator()() { return suffixFactor; }
            const T& operator()() const { return suffixFactor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct UpgradeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "upgradeId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T upgradeId;
            T& operator()() { return upgradeId; }
            const T& operator()() const { return upgradeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct FixedScalingLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fixedScalingLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fixedScalingLevel;
            T& operator()() { return fixedScalingLevel; }
            const T& operator()() const { return fixedScalingLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ArtifactKnowledgeLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "artifactKnowledgeLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T artifactKnowledgeLevel;
            T& operator()() { return artifactKnowledgeLevel; }
            const T& operator()() const { return artifactKnowledgeLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct BonusListIDs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bonusListIDs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bonusListIDs;
            T& operator()() { return bonusListIDs; }
            const T& operator()() const { return bonusListIDs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct CharacterVoidStorage: sqlpp::table_t<CharacterVoidStorage,
               CharacterVoidStorage_::ItemId,
               CharacterVoidStorage_::PlayerGuid,
               CharacterVoidStorage_::ItemEntry,
               CharacterVoidStorage_::Slot,
               CharacterVoidStorage_::CreatorGuid,
               CharacterVoidStorage_::RandomProperty,
               CharacterVoidStorage_::SuffixFactor,
               CharacterVoidStorage_::UpgradeId,
               CharacterVoidStorage_::FixedScalingLevel,
               CharacterVoidStorage_::ArtifactKnowledgeLevel,
               CharacterVoidStorage_::BonusListIDs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "character_void_storage";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characterVoidStorage;
        T& operator()() { return characterVoidStorage; }
        const T& operator()() const { return characterVoidStorage; }
      };
    };
  };
  namespace Characters_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Account
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "account";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T account;
            T& operator()() { return account; }
            const T& operator()() const { return account; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Race
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T race;
            T& operator()() { return race; }
            const T& operator()() const { return race; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Gender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gender;
            T& operator()() { return gender; }
            const T& operator()() const { return gender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Xp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xp;
            T& operator()() { return xp; }
            const T& operator()() const { return xp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Money
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "money";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T money;
            T& operator()() { return money; }
            const T& operator()() const { return money; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Skin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "skin";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skin;
            T& operator()() { return skin; }
            const T& operator()() const { return skin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Face
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "face";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T face;
            T& operator()() { return face; }
            const T& operator()() const { return face; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct HairStyle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hairStyle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hairStyle;
            T& operator()() { return hairStyle; }
            const T& operator()() const { return hairStyle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct HairColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hairColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hairColor;
            T& operator()() { return hairColor; }
            const T& operator()() const { return hairColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct FacialStyle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "facialStyle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T facialStyle;
            T& operator()() { return facialStyle; }
            const T& operator()() const { return facialStyle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct CustomDisplay1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "customDisplay1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T customDisplay1;
            T& operator()() { return customDisplay1; }
            const T& operator()() const { return customDisplay1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct CustomDisplay2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "customDisplay2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T customDisplay2;
            T& operator()() { return customDisplay2; }
            const T& operator()() const { return customDisplay2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct CustomDisplay3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "customDisplay3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T customDisplay3;
            T& operator()() { return customDisplay3; }
            const T& operator()() const { return customDisplay3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BankSlots
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bankSlots";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bankSlots;
            T& operator()() { return bankSlots; }
            const T& operator()() const { return bankSlots; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RestState
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "restState";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T restState;
            T& operator()() { return restState; }
            const T& operator()() const { return restState; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct PlayerFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerFlags;
            T& operator()() { return playerFlags; }
            const T& operator()() const { return playerFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct InstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceId;
            T& operator()() { return instanceId; }
            const T& operator()() const { return instanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct DungeonDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dungeonDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dungeonDifficulty;
            T& operator()() { return dungeonDifficulty; }
            const T& operator()() const { return dungeonDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RaidDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "raidDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raidDifficulty;
            T& operator()() { return raidDifficulty; }
            const T& operator()() const { return raidDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LegacyRaidDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "legacyRaidDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T legacyRaidDifficulty;
            T& operator()() { return legacyRaidDifficulty; }
            const T& operator()() const { return legacyRaidDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Taximask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "taximask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taximask;
            T& operator()() { return taximask; }
            const T& operator()() const { return taximask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Online
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "online";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T online;
            T& operator()() { return online; }
            const T& operator()() const { return online; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Cinematic
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cinematic";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cinematic;
            T& operator()() { return cinematic; }
            const T& operator()() const { return cinematic; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Totaltime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "totaltime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T totaltime;
            T& operator()() { return totaltime; }
            const T& operator()() const { return totaltime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Leveltime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leveltime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leveltime;
            T& operator()() { return leveltime; }
            const T& operator()() const { return leveltime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct LogoutTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "logout_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T logoutTime;
            T& operator()() { return logoutTime; }
            const T& operator()() const { return logoutTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct IsLogoutResting
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "is_logout_resting";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isLogoutResting;
            T& operator()() { return isLogoutResting; }
            const T& operator()() const { return isLogoutResting; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RestBonus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rest_bonus";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T restBonus;
            T& operator()() { return restBonus; }
            const T& operator()() const { return restBonus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ResettalentsCost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resettalents_cost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resettalentsCost;
            T& operator()() { return resettalentsCost; }
            const T& operator()() const { return resettalentsCost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ResettalentsTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resettalents_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resettalentsTime;
            T& operator()() { return resettalentsTime; }
            const T& operator()() const { return resettalentsTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PrimarySpecialization
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "primarySpecialization";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T primarySpecialization;
            T& operator()() { return primarySpecialization; }
            const T& operator()() const { return primarySpecialization; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TransX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trans_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transX;
            T& operator()() { return transX; }
            const T& operator()() const { return transX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TransY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trans_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transY;
            T& operator()() { return transY; }
            const T& operator()() const { return transY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TransZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trans_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transZ;
            T& operator()() { return transZ; }
            const T& operator()() const { return transZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TransO
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "trans_o";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transO;
            T& operator()() { return transO; }
            const T& operator()() const { return transO; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Transguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "transguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transguid;
            T& operator()() { return transguid; }
            const T& operator()() const { return transguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct ExtraFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "extra_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T extraFlags;
            T& operator()() { return extraFlags; }
            const T& operator()() const { return extraFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct StableSlots
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stable_slots";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stableSlots;
            T& operator()() { return stableSlots; }
            const T& operator()() const { return stableSlots; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct AtLogin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "at_login";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T atLogin;
            T& operator()() { return atLogin; }
            const T& operator()() const { return atLogin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zone;
            T& operator()() { return zone; }
            const T& operator()() const { return zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct DeathExpireTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "death_expire_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deathExpireTime;
            T& operator()() { return deathExpireTime; }
            const T& operator()() const { return deathExpireTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TaxiPath
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "taxi_path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T taxiPath;
            T& operator()() { return taxiPath; }
            const T& operator()() const { return taxiPath; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TotalKills
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "totalKills";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T totalKills;
            T& operator()() { return totalKills; }
            const T& operator()() const { return totalKills; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TodayKills
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "todayKills";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T todayKills;
            T& operator()() { return todayKills; }
            const T& operator()() const { return todayKills; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct YesterdayKills
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "yesterdayKills";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T yesterdayKills;
            T& operator()() { return yesterdayKills; }
            const T& operator()() const { return yesterdayKills; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct ChosenTitle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "chosenTitle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chosenTitle;
            T& operator()() { return chosenTitle; }
            const T& operator()() const { return chosenTitle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WatchedFaction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "watchedFaction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T watchedFaction;
            T& operator()() { return watchedFaction; }
            const T& operator()() const { return watchedFaction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Drunk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "drunk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T drunk;
            T& operator()() { return drunk; }
            const T& operator()() const { return drunk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Health
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "health";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T health;
            T& operator()() { return health; }
            const T& operator()() const { return health; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Power1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power1;
            T& operator()() { return power1; }
            const T& operator()() const { return power1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Power2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power2;
            T& operator()() { return power2; }
            const T& operator()() const { return power2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Power3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power3;
            T& operator()() { return power3; }
            const T& operator()() const { return power3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Power4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power4;
            T& operator()() { return power4; }
            const T& operator()() const { return power4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Power5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power5;
            T& operator()() { return power5; }
            const T& operator()() const { return power5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Power6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "power6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T power6;
            T& operator()() { return power6; }
            const T& operator()() const { return power6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Latency
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "latency";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T latency;
            T& operator()() { return latency; }
            const T& operator()() const { return latency; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ActiveTalentGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "activeTalentGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T activeTalentGroup;
            T& operator()() { return activeTalentGroup; }
            const T& operator()() const { return activeTalentGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootSpecId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lootSpecId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lootSpecId;
            T& operator()() { return lootSpecId; }
            const T& operator()() const { return lootSpecId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ExploredZones
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "exploredZones";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exploredZones;
            T& operator()() { return exploredZones; }
            const T& operator()() const { return exploredZones; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct EquipmentCache
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "equipmentCache";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipmentCache;
            T& operator()() { return equipmentCache; }
            const T& operator()() const { return equipmentCache; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct KnownTitles
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "knownTitles";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T knownTitles;
            T& operator()() { return knownTitles; }
            const T& operator()() const { return knownTitles; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ActionBars
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "actionBars";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionBars;
            T& operator()() { return actionBars; }
            const T& operator()() const { return actionBars; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct GrantableLevels
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "grantableLevels";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T grantableLevels;
            T& operator()() { return grantableLevels; }
            const T& operator()() const { return grantableLevels; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct DeleteInfosAccount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleteInfos_Account";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleteInfosAccount;
            T& operator()() { return deleteInfosAccount; }
            const T& operator()() const { return deleteInfosAccount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct DeleteInfosName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleteInfos_Name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleteInfosName;
            T& operator()() { return deleteInfosName; }
            const T& operator()() const { return deleteInfosName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct DeleteDate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deleteDate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deleteDate;
            T& operator()() { return deleteDate; }
            const T& operator()() const { return deleteDate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  }

  struct Characters: sqlpp::table_t<Characters,
               Characters_::Guid,
               Characters_::Account,
               Characters_::Name,
               Characters_::Slot,
               Characters_::Race,
               Characters_::Class,
               Characters_::Gender,
               Characters_::Level,
               Characters_::Xp,
               Characters_::Money,
               Characters_::Skin,
               Characters_::Face,
               Characters_::HairStyle,
               Characters_::HairColor,
               Characters_::FacialStyle,
               Characters_::CustomDisplay1,
               Characters_::CustomDisplay2,
               Characters_::CustomDisplay3,
               Characters_::BankSlots,
               Characters_::RestState,
               Characters_::PlayerFlags,
               Characters_::PositionX,
               Characters_::PositionY,
               Characters_::PositionZ,
               Characters_::Map,
               Characters_::InstanceId,
               Characters_::DungeonDifficulty,
               Characters_::RaidDifficulty,
               Characters_::LegacyRaidDifficulty,
               Characters_::Orientation,
               Characters_::Taximask,
               Characters_::Online,
               Characters_::Cinematic,
               Characters_::Totaltime,
               Characters_::Leveltime,
               Characters_::LogoutTime,
               Characters_::IsLogoutResting,
               Characters_::RestBonus,
               Characters_::ResettalentsCost,
               Characters_::ResettalentsTime,
               Characters_::PrimarySpecialization,
               Characters_::TransX,
               Characters_::TransY,
               Characters_::TransZ,
               Characters_::TransO,
               Characters_::Transguid,
               Characters_::ExtraFlags,
               Characters_::StableSlots,
               Characters_::AtLogin,
               Characters_::Zone,
               Characters_::DeathExpireTime,
               Characters_::TaxiPath,
               Characters_::TotalKills,
               Characters_::TodayKills,
               Characters_::YesterdayKills,
               Characters_::ChosenTitle,
               Characters_::WatchedFaction,
               Characters_::Drunk,
               Characters_::Health,
               Characters_::Power1,
               Characters_::Power2,
               Characters_::Power3,
               Characters_::Power4,
               Characters_::Power5,
               Characters_::Power6,
               Characters_::Latency,
               Characters_::ActiveTalentGroup,
               Characters_::LootSpecId,
               Characters_::ExploredZones,
               Characters_::EquipmentCache,
               Characters_::KnownTitles,
               Characters_::ActionBars,
               Characters_::GrantableLevels,
               Characters_::DeleteInfosAccount,
               Characters_::DeleteInfosName,
               Characters_::DeleteDate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "characters";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T characters;
        T& operator()() { return characters; }
        const T& operator()() const { return characters; }
      };
    };
  };
  namespace Corpse_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct PosX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posX;
            T& operator()() { return posX; }
            const T& operator()() const { return posX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posY;
            T& operator()() { return posY; }
            const T& operator()() const { return posY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posZ;
            T& operator()() { return posZ; }
            const T& operator()() const { return posZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct DisplayId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "displayId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T displayId;
            T& operator()() { return displayId; }
            const T& operator()() const { return displayId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemCache
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemCache";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemCache;
            T& operator()() { return itemCache; }
            const T& operator()() const { return itemCache; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Bytes1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bytes1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bytes1;
            T& operator()() { return bytes1; }
            const T& operator()() const { return bytes1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Bytes2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bytes2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bytes2;
            T& operator()() { return bytes2; }
            const T& operator()() const { return bytes2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct DynFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dynFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dynFlags;
            T& operator()() { return dynFlags; }
            const T& operator()() const { return dynFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CorpseType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "corpseType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T corpseType;
            T& operator()() { return corpseType; }
            const T& operator()() const { return corpseType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct InstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceId;
            T& operator()() { return instanceId; }
            const T& operator()() const { return instanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct Corpse: sqlpp::table_t<Corpse,
               Corpse_::Guid,
               Corpse_::PosX,
               Corpse_::PosY,
               Corpse_::PosZ,
               Corpse_::Orientation,
               Corpse_::MapId,
               Corpse_::DisplayId,
               Corpse_::ItemCache,
               Corpse_::Bytes1,
               Corpse_::Bytes2,
               Corpse_::Flags,
               Corpse_::DynFlags,
               Corpse_::Time,
               Corpse_::CorpseType,
               Corpse_::InstanceId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "corpse";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T corpse;
        T& operator()() { return corpse; }
        const T& operator()() const { return corpse; }
      };
    };
  };
  namespace CorpsePhases_
  {
    struct OwnerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "OwnerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T OwnerGuid;
            T& operator()() { return OwnerGuid; }
            const T& operator()() const { return OwnerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct PhaseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "PhaseId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PhaseId;
            T& operator()() { return PhaseId; }
            const T& operator()() const { return PhaseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  }

  struct CorpsePhases: sqlpp::table_t<CorpsePhases,
               CorpsePhases_::OwnerGuid,
               CorpsePhases_::PhaseId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "corpse_phases";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T corpsePhases;
        T& operator()() { return corpsePhases; }
        const T& operator()() const { return corpsePhases; }
      };
    };
  };
  namespace CreatureRespawn_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct RespawnTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "respawnTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T respawnTime;
            T& operator()() { return respawnTime; }
            const T& operator()() const { return respawnTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct InstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceId;
            T& operator()() { return instanceId; }
            const T& operator()() const { return instanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct CreatureRespawn: sqlpp::table_t<CreatureRespawn,
               CreatureRespawn_::Guid,
               CreatureRespawn_::RespawnTime,
               CreatureRespawn_::MapId,
               CreatureRespawn_::InstanceId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_respawn";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureRespawn;
        T& operator()() { return creatureRespawn; }
        const T& operator()() const { return creatureRespawn; }
      };
    };
  };
  namespace GameEventConditionSave_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct ConditionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "condition_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T conditionId;
            T& operator()() { return conditionId; }
            const T& operator()() const { return conditionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Done
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "done";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T done;
            T& operator()() { return done; }
            const T& operator()() const { return done; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  }

  struct GameEventConditionSave: sqlpp::table_t<GameEventConditionSave,
               GameEventConditionSave_::EventEntry,
               GameEventConditionSave_::ConditionId,
               GameEventConditionSave_::Done>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_condition_save";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventConditionSave;
        T& operator()() { return gameEventConditionSave; }
        const T& operator()() const { return gameEventConditionSave; }
      };
    };
  };
  namespace GameEventSave_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct NextStart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "next_start";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nextStart;
            T& operator()() { return nextStart; }
            const T& operator()() const { return nextStart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GameEventSave: sqlpp::table_t<GameEventSave,
               GameEventSave_::EventEntry,
               GameEventSave_::State,
               GameEventSave_::NextStart>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_save";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventSave;
        T& operator()() { return gameEventSave; }
        const T& operator()() const { return gameEventSave; }
      };
    };
  };
  namespace GameobjectRespawn_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct RespawnTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "respawnTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T respawnTime;
            T& operator()() { return respawnTime; }
            const T& operator()() const { return respawnTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct InstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instanceId;
            T& operator()() { return instanceId; }
            const T& operator()() const { return instanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GameobjectRespawn: sqlpp::table_t<GameobjectRespawn,
               GameobjectRespawn_::Guid,
               GameobjectRespawn_::RespawnTime,
               GameobjectRespawn_::MapId,
               GameobjectRespawn_::InstanceId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_respawn";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectRespawn;
        T& operator()() { return gameobjectRespawn; }
        const T& operator()() const { return gameobjectRespawn; }
      };
    };
  };
  namespace GmBug_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerGuid;
            T& operator()() { return playerGuid; }
            const T& operator()() const { return playerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "createTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PosX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posX;
            T& operator()() { return posX; }
            const T& operator()() const { return posX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posY;
            T& operator()() { return posY; }
            const T& operator()() const { return posY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posZ;
            T& operator()() { return posZ; }
            const T& operator()() const { return posZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Facing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "facing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T facing;
            T& operator()() { return facing; }
            const T& operator()() const { return facing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ClosedBy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "closedBy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T closedBy;
            T& operator()() { return closedBy; }
            const T& operator()() const { return closedBy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct AssignedTo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "assignedTo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assignedTo;
            T& operator()() { return assignedTo; }
            const T& operator()() const { return assignedTo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct GmBug: sqlpp::table_t<GmBug,
               GmBug_::Id,
               GmBug_::PlayerGuid,
               GmBug_::Note,
               GmBug_::CreateTime,
               GmBug_::MapId,
               GmBug_::PosX,
               GmBug_::PosY,
               GmBug_::PosZ,
               GmBug_::Facing,
               GmBug_::ClosedBy,
               GmBug_::AssignedTo,
               GmBug_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gm_bug";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gmBug;
        T& operator()() { return gmBug; }
        const T& operator()() const { return gmBug; }
      };
    };
  };
  namespace GmComplaint_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerGuid;
            T& operator()() { return playerGuid; }
            const T& operator()() const { return playerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "createTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PosX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posX;
            T& operator()() { return posX; }
            const T& operator()() const { return posX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posY;
            T& operator()() { return posY; }
            const T& operator()() const { return posY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posZ;
            T& operator()() { return posZ; }
            const T& operator()() const { return posZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Facing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "facing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T facing;
            T& operator()() { return facing; }
            const T& operator()() const { return facing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TargetCharacterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "targetCharacterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetCharacterGuid;
            T& operator()() { return targetCharacterGuid; }
            const T& operator()() const { return targetCharacterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct ComplaintType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "complaintType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T complaintType;
            T& operator()() { return complaintType; }
            const T& operator()() const { return complaintType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct ReportLineIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "reportLineIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reportLineIndex;
            T& operator()() { return reportLineIndex; }
            const T& operator()() const { return reportLineIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ClosedBy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "closedBy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T closedBy;
            T& operator()() { return closedBy; }
            const T& operator()() const { return closedBy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct AssignedTo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "assignedTo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assignedTo;
            T& operator()() { return assignedTo; }
            const T& operator()() const { return assignedTo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct GmComplaint: sqlpp::table_t<GmComplaint,
               GmComplaint_::Id,
               GmComplaint_::PlayerGuid,
               GmComplaint_::Note,
               GmComplaint_::CreateTime,
               GmComplaint_::MapId,
               GmComplaint_::PosX,
               GmComplaint_::PosY,
               GmComplaint_::PosZ,
               GmComplaint_::Facing,
               GmComplaint_::TargetCharacterGuid,
               GmComplaint_::ComplaintType,
               GmComplaint_::ReportLineIndex,
               GmComplaint_::ClosedBy,
               GmComplaint_::AssignedTo,
               GmComplaint_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gm_complaint";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gmComplaint;
        T& operator()() { return gmComplaint; }
        const T& operator()() const { return gmComplaint; }
      };
    };
  };
  namespace GmComplaintChatlog_
  {
    struct ComplaintId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "complaintId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T complaintId;
            T& operator()() { return complaintId; }
            const T& operator()() const { return complaintId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LineId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lineId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lineId;
            T& operator()() { return lineId; }
            const T& operator()() const { return lineId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct GmComplaintChatlog: sqlpp::table_t<GmComplaintChatlog,
               GmComplaintChatlog_::ComplaintId,
               GmComplaintChatlog_::LineId,
               GmComplaintChatlog_::Timestamp,
               GmComplaintChatlog_::Text>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gm_complaint_chatlog";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gmComplaintChatlog;
        T& operator()() { return gmComplaintChatlog; }
        const T& operator()() const { return gmComplaintChatlog; }
      };
    };
  };
  namespace GmSuggestion_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerGuid;
            T& operator()() { return playerGuid; }
            const T& operator()() const { return playerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct CreateTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "createTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createTime;
            T& operator()() { return createTime; }
            const T& operator()() const { return createTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PosX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posX;
            T& operator()() { return posX; }
            const T& operator()() const { return posX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posY;
            T& operator()() { return posY; }
            const T& operator()() const { return posY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PosZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "posZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T posZ;
            T& operator()() { return posZ; }
            const T& operator()() const { return posZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Facing
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "facing";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T facing;
            T& operator()() { return facing; }
            const T& operator()() const { return facing; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ClosedBy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "closedBy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T closedBy;
            T& operator()() { return closedBy; }
            const T& operator()() const { return closedBy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct AssignedTo
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "assignedTo";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T assignedTo;
            T& operator()() { return assignedTo; }
            const T& operator()() const { return assignedTo; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct GmSuggestion: sqlpp::table_t<GmSuggestion,
               GmSuggestion_::Id,
               GmSuggestion_::PlayerGuid,
               GmSuggestion_::Note,
               GmSuggestion_::CreateTime,
               GmSuggestion_::MapId,
               GmSuggestion_::PosX,
               GmSuggestion_::PosY,
               GmSuggestion_::PosZ,
               GmSuggestion_::Facing,
               GmSuggestion_::ClosedBy,
               GmSuggestion_::AssignedTo,
               GmSuggestion_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gm_suggestion";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gmSuggestion;
        T& operator()() { return gmSuggestion; }
        const T& operator()() const { return gmSuggestion; }
      };
    };
  };
  namespace GroupInstance_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Instance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "instance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T instance;
            T& operator()() { return instance; }
            const T& operator()() const { return instance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Permanent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "permanent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permanent;
            T& operator()() { return permanent; }
            const T& operator()() const { return permanent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct GroupInstance: sqlpp::table_t<GroupInstance,
               GroupInstance_::Guid,
               GroupInstance_::Instance,
               GroupInstance_::Permanent>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "group_instance";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T groupInstance;
        T& operator()() { return groupInstance; }
        const T& operator()() const { return groupInstance; }
      };
    };
  };
  namespace GroupMember_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct MemberGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "memberGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T memberGuid;
            T& operator()() { return memberGuid; }
            const T& operator()() const { return memberGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct MemberFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "memberFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T memberFlags;
            T& operator()() { return memberFlags; }
            const T& operator()() const { return memberFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Subgroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subgroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subgroup;
            T& operator()() { return subgroup; }
            const T& operator()() const { return subgroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Roles
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "roles";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T roles;
            T& operator()() { return roles; }
            const T& operator()() const { return roles; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct GroupMember: sqlpp::table_t<GroupMember,
               GroupMember_::Guid,
               GroupMember_::MemberGuid,
               GroupMember_::MemberFlags,
               GroupMember_::Subgroup,
               GroupMember_::Roles>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "group_member";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T groupMember;
        T& operator()() { return groupMember; }
        const T& operator()() const { return groupMember; }
      };
    };
  };
  namespace Groups_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct LeaderGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaderGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaderGuid;
            T& operator()() { return leaderGuid; }
            const T& operator()() const { return leaderGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct LootMethod
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lootMethod";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lootMethod;
            T& operator()() { return lootMethod; }
            const T& operator()() const { return lootMethod; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct LooterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "looterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T looterGuid;
            T& operator()() { return looterGuid; }
            const T& operator()() const { return looterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct LootThreshold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "lootThreshold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lootThreshold;
            T& operator()() { return lootThreshold; }
            const T& operator()() const { return lootThreshold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Icon1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon1;
            T& operator()() { return icon1; }
            const T& operator()() const { return icon1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon2;
            T& operator()() { return icon2; }
            const T& operator()() const { return icon2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon3;
            T& operator()() { return icon3; }
            const T& operator()() const { return icon3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon4;
            T& operator()() { return icon4; }
            const T& operator()() const { return icon4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon5;
            T& operator()() { return icon5; }
            const T& operator()() const { return icon5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon6;
            T& operator()() { return icon6; }
            const T& operator()() const { return icon6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon7;
            T& operator()() { return icon7; }
            const T& operator()() const { return icon7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Icon8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "icon8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon8;
            T& operator()() { return icon8; }
            const T& operator()() const { return icon8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct GroupType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "groupType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupType;
            T& operator()() { return groupType; }
            const T& operator()() const { return groupType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Difficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "difficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficulty;
            T& operator()() { return difficulty; }
            const T& operator()() const { return difficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RaidDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "raidDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raidDifficulty;
            T& operator()() { return raidDifficulty; }
            const T& operator()() const { return raidDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LegacyRaidDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "legacyRaidDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T legacyRaidDifficulty;
            T& operator()() { return legacyRaidDifficulty; }
            const T& operator()() const { return legacyRaidDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct MasterLooterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "masterLooterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T masterLooterGuid;
            T& operator()() { return masterLooterGuid; }
            const T& operator()() const { return masterLooterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
  }

  struct Groups: sqlpp::table_t<Groups,
               Groups_::Guid,
               Groups_::LeaderGuid,
               Groups_::LootMethod,
               Groups_::LooterGuid,
               Groups_::LootThreshold,
               Groups_::Icon1,
               Groups_::Icon2,
               Groups_::Icon3,
               Groups_::Icon4,
               Groups_::Icon5,
               Groups_::Icon6,
               Groups_::Icon7,
               Groups_::Icon8,
               Groups_::GroupType,
               Groups_::Difficulty,
               Groups_::RaidDifficulty,
               Groups_::LegacyRaidDifficulty,
               Groups_::MasterLooterGuid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "groups";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T groups;
        T& operator()() { return groups; }
        const T& operator()() const { return groups; }
      };
    };
  };
  namespace Guild_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Leaderguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "leaderguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaderguid;
            T& operator()() { return leaderguid; }
            const T& operator()() const { return leaderguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct EmblemStyle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EmblemStyle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmblemStyle;
            T& operator()() { return EmblemStyle; }
            const T& operator()() const { return EmblemStyle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct EmblemColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EmblemColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmblemColor;
            T& operator()() { return EmblemColor; }
            const T& operator()() const { return EmblemColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BorderStyle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "BorderStyle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BorderStyle;
            T& operator()() { return BorderStyle; }
            const T& operator()() const { return BorderStyle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BorderColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "BorderColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BorderColor;
            T& operator()() { return BorderColor; }
            const T& operator()() const { return BorderColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BackgroundColor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "BackgroundColor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BackgroundColor;
            T& operator()() { return BackgroundColor; }
            const T& operator()() const { return BackgroundColor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Info
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "info";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T info;
            T& operator()() { return info; }
            const T& operator()() const { return info; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Motd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "motd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T motd;
            T& operator()() { return motd; }
            const T& operator()() const { return motd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Createdate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "createdate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T createdate;
            T& operator()() { return createdate; }
            const T& operator()() const { return createdate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BankMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "BankMoney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BankMoney;
            T& operator()() { return BankMoney; }
            const T& operator()() const { return BankMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  }

  struct Guild: sqlpp::table_t<Guild,
               Guild_::Guildid,
               Guild_::Name,
               Guild_::Leaderguid,
               Guild_::EmblemStyle,
               Guild_::EmblemColor,
               Guild_::BorderStyle,
               Guild_::BorderColor,
               Guild_::BackgroundColor,
               Guild_::Info,
               Guild_::Motd,
               Guild_::Createdate,
               Guild_::BankMoney,
               Guild_::Level>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guild;
        T& operator()() { return guild; }
        const T& operator()() const { return guild; }
      };
    };
  };
  namespace GuildAchievement_
  {
    struct GuildId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildId;
            T& operator()() { return guildId; }
            const T& operator()() const { return guildId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Achievement
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "achievement";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T achievement;
            T& operator()() { return achievement; }
            const T& operator()() const { return achievement; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Guids
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guids";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guids;
            T& operator()() { return guids; }
            const T& operator()() const { return guids; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct GuildAchievement: sqlpp::table_t<GuildAchievement,
               GuildAchievement_::GuildId,
               GuildAchievement_::Achievement,
               GuildAchievement_::Date,
               GuildAchievement_::Guids>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_achievement";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildAchievement;
        T& operator()() { return guildAchievement; }
        const T& operator()() const { return guildAchievement; }
      };
    };
  };
  namespace GuildAchievementProgress_
  {
    struct GuildId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildId;
            T& operator()() { return guildId; }
            const T& operator()() const { return guildId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Criteria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "criteria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T criteria;
            T& operator()() { return criteria; }
            const T& operator()() const { return criteria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Counter
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "counter";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T counter;
            T& operator()() { return counter; }
            const T& operator()() const { return counter; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CompletedGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "completedGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T completedGuid;
            T& operator()() { return completedGuid; }
            const T& operator()() const { return completedGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct GuildAchievementProgress: sqlpp::table_t<GuildAchievementProgress,
               GuildAchievementProgress_::GuildId,
               GuildAchievementProgress_::Criteria,
               GuildAchievementProgress_::Counter,
               GuildAchievementProgress_::Date,
               GuildAchievementProgress_::CompletedGuid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_achievement_progress";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildAchievementProgress;
        T& operator()() { return guildAchievementProgress; }
        const T& operator()() const { return guildAchievementProgress; }
      };
    };
  };
  namespace GuildBankEventlog_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct LogGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "LogGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogGuid;
            T& operator()() { return LogGuid; }
            const T& operator()() const { return LogGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TabId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabId;
            T& operator()() { return TabId; }
            const T& operator()() const { return TabId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct EventType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EventType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EventType;
            T& operator()() { return EventType; }
            const T& operator()() const { return EventType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "PlayerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerGuid;
            T& operator()() { return PlayerGuid; }
            const T& operator()() const { return PlayerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct ItemOrMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ItemOrMoney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemOrMoney;
            T& operator()() { return ItemOrMoney; }
            const T& operator()() const { return ItemOrMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct ItemStackCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ItemStackCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemStackCount;
            T& operator()() { return ItemStackCount; }
            const T& operator()() const { return ItemStackCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct DestTabId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "DestTabId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DestTabId;
            T& operator()() { return DestTabId; }
            const T& operator()() const { return DestTabId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct TimeStamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TimeStamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TimeStamp;
            T& operator()() { return TimeStamp; }
            const T& operator()() const { return TimeStamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GuildBankEventlog: sqlpp::table_t<GuildBankEventlog,
               GuildBankEventlog_::Guildid,
               GuildBankEventlog_::LogGuid,
               GuildBankEventlog_::TabId,
               GuildBankEventlog_::EventType,
               GuildBankEventlog_::PlayerGuid,
               GuildBankEventlog_::ItemOrMoney,
               GuildBankEventlog_::ItemStackCount,
               GuildBankEventlog_::DestTabId,
               GuildBankEventlog_::TimeStamp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_bank_eventlog";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildBankEventlog;
        T& operator()() { return guildBankEventlog; }
        const T& operator()() const { return guildBankEventlog; }
      };
    };
  };
  namespace GuildBankItem_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct TabId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabId;
            T& operator()() { return TabId; }
            const T& operator()() const { return TabId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SlotId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "SlotId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SlotId;
            T& operator()() { return SlotId; }
            const T& operator()() const { return SlotId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct GuildBankItem: sqlpp::table_t<GuildBankItem,
               GuildBankItem_::Guildid,
               GuildBankItem_::TabId,
               GuildBankItem_::SlotId,
               GuildBankItem_::ItemGuid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_bank_item";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildBankItem;
        T& operator()() { return guildBankItem; }
        const T& operator()() const { return guildBankItem; }
      };
    };
  };
  namespace GuildBankRight_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct TabId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabId;
            T& operator()() { return TabId; }
            const T& operator()() const { return TabId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Rid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rid;
            T& operator()() { return rid; }
            const T& operator()() const { return rid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Gbright
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gbright";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gbright;
            T& operator()() { return gbright; }
            const T& operator()() const { return gbright; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SlotPerDay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "SlotPerDay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SlotPerDay;
            T& operator()() { return SlotPerDay; }
            const T& operator()() const { return SlotPerDay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GuildBankRight: sqlpp::table_t<GuildBankRight,
               GuildBankRight_::Guildid,
               GuildBankRight_::TabId,
               GuildBankRight_::Rid,
               GuildBankRight_::Gbright,
               GuildBankRight_::SlotPerDay>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_bank_right";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildBankRight;
        T& operator()() { return guildBankRight; }
        const T& operator()() const { return guildBankRight; }
      };
    };
  };
  namespace GuildBankTab_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct TabId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabId;
            T& operator()() { return TabId; }
            const T& operator()() const { return TabId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct TabName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabName;
            T& operator()() { return TabName; }
            const T& operator()() const { return TabName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct TabIcon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabIcon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabIcon;
            T& operator()() { return TabIcon; }
            const T& operator()() const { return TabIcon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct TabText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TabText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TabText;
            T& operator()() { return TabText; }
            const T& operator()() const { return TabText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct GuildBankTab: sqlpp::table_t<GuildBankTab,
               GuildBankTab_::Guildid,
               GuildBankTab_::TabId,
               GuildBankTab_::TabName,
               GuildBankTab_::TabIcon,
               GuildBankTab_::TabText>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_bank_tab";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildBankTab;
        T& operator()() { return guildBankTab; }
        const T& operator()() const { return guildBankTab; }
      };
    };
  };
  namespace GuildEventlog_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct LogGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "LogGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogGuid;
            T& operator()() { return LogGuid; }
            const T& operator()() const { return LogGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EventType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EventType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EventType;
            T& operator()() { return EventType; }
            const T& operator()() const { return EventType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "PlayerGuid1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerGuid1;
            T& operator()() { return PlayerGuid1; }
            const T& operator()() const { return PlayerGuid1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "PlayerGuid2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerGuid2;
            T& operator()() { return PlayerGuid2; }
            const T& operator()() const { return PlayerGuid2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct NewRank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "NewRank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T NewRank;
            T& operator()() { return NewRank; }
            const T& operator()() const { return NewRank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct TimeStamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TimeStamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TimeStamp;
            T& operator()() { return TimeStamp; }
            const T& operator()() const { return TimeStamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  }

  struct GuildEventlog: sqlpp::table_t<GuildEventlog,
               GuildEventlog_::Guildid,
               GuildEventlog_::LogGuid,
               GuildEventlog_::EventType,
               GuildEventlog_::PlayerGuid1,
               GuildEventlog_::PlayerGuid2,
               GuildEventlog_::NewRank,
               GuildEventlog_::TimeStamp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_eventlog";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildEventlog;
        T& operator()() { return guildEventlog; }
        const T& operator()() const { return guildEventlog; }
      };
    };
  };
  namespace GuildFinderApplicant_
  {
    struct GuildId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildId;
            T& operator()() { return guildId; }
            const T& operator()() const { return guildId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerGuid;
            T& operator()() { return playerGuid; }
            const T& operator()() const { return playerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Availability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "availability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T availability;
            T& operator()() { return availability; }
            const T& operator()() const { return availability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct ClassRole
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "classRole";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classRole;
            T& operator()() { return classRole; }
            const T& operator()() const { return classRole; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct Interests
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "interests";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T interests;
            T& operator()() { return interests; }
            const T& operator()() const { return interests; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct SubmitTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "submitTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T submitTime;
            T& operator()() { return submitTime; }
            const T& operator()() const { return submitTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  }

  struct GuildFinderApplicant: sqlpp::table_t<GuildFinderApplicant,
               GuildFinderApplicant_::GuildId,
               GuildFinderApplicant_::PlayerGuid,
               GuildFinderApplicant_::Availability,
               GuildFinderApplicant_::ClassRole,
               GuildFinderApplicant_::Interests,
               GuildFinderApplicant_::Comment,
               GuildFinderApplicant_::SubmitTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_finder_applicant";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildFinderApplicant;
        T& operator()() { return guildFinderApplicant; }
        const T& operator()() const { return guildFinderApplicant; }
      };
    };
  };
  namespace GuildFinderGuildSettings_
  {
    struct GuildId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildId;
            T& operator()() { return guildId; }
            const T& operator()() const { return guildId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Availability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "availability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T availability;
            T& operator()() { return availability; }
            const T& operator()() const { return availability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ClassRoles
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "classRoles";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classRoles;
            T& operator()() { return classRoles; }
            const T& operator()() const { return classRoles; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Interests
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "interests";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T interests;
            T& operator()() { return interests; }
            const T& operator()() const { return interests; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Listed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "listed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T listed;
            T& operator()() { return listed; }
            const T& operator()() const { return listed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct GuildFinderGuildSettings: sqlpp::table_t<GuildFinderGuildSettings,
               GuildFinderGuildSettings_::GuildId,
               GuildFinderGuildSettings_::Availability,
               GuildFinderGuildSettings_::ClassRoles,
               GuildFinderGuildSettings_::Interests,
               GuildFinderGuildSettings_::Level,
               GuildFinderGuildSettings_::Listed,
               GuildFinderGuildSettings_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_finder_guild_settings";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildFinderGuildSettings;
        T& operator()() { return guildFinderGuildSettings; }
        const T& operator()() const { return guildFinderGuildSettings; }
      };
    };
  };
  namespace GuildMember_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Rank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank;
            T& operator()() { return rank; }
            const T& operator()() const { return rank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Pnote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pnote";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pnote;
            T& operator()() { return pnote; }
            const T& operator()() const { return pnote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Offnote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "offnote";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T offnote;
            T& operator()() { return offnote; }
            const T& operator()() const { return offnote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct GuildMember: sqlpp::table_t<GuildMember,
               GuildMember_::Guildid,
               GuildMember_::Guid,
               GuildMember_::Rank,
               GuildMember_::Pnote,
               GuildMember_::Offnote>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_member";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildMember;
        T& operator()() { return guildMember; }
        const T& operator()() const { return guildMember; }
      };
    };
  };
  namespace GuildMemberWithdraw_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Tab0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab0;
            T& operator()() { return tab0; }
            const T& operator()() const { return tab0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab1;
            T& operator()() { return tab1; }
            const T& operator()() const { return tab1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab2;
            T& operator()() { return tab2; }
            const T& operator()() const { return tab2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab3;
            T& operator()() { return tab3; }
            const T& operator()() const { return tab3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab4;
            T& operator()() { return tab4; }
            const T& operator()() const { return tab4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab5;
            T& operator()() { return tab5; }
            const T& operator()() const { return tab5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab6;
            T& operator()() { return tab6; }
            const T& operator()() const { return tab6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Tab7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "tab7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tab7;
            T& operator()() { return tab7; }
            const T& operator()() const { return tab7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Money
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "money";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T money;
            T& operator()() { return money; }
            const T& operator()() const { return money; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GuildMemberWithdraw: sqlpp::table_t<GuildMemberWithdraw,
               GuildMemberWithdraw_::Guid,
               GuildMemberWithdraw_::Tab0,
               GuildMemberWithdraw_::Tab1,
               GuildMemberWithdraw_::Tab2,
               GuildMemberWithdraw_::Tab3,
               GuildMemberWithdraw_::Tab4,
               GuildMemberWithdraw_::Tab5,
               GuildMemberWithdraw_::Tab6,
               GuildMemberWithdraw_::Tab7,
               GuildMemberWithdraw_::Money>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_member_withdraw";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildMemberWithdraw;
        T& operator()() { return guildMemberWithdraw; }
        const T& operator()() const { return guildMemberWithdraw; }
      };
    };
  };
  namespace GuildNewslog_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct LogGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "LogGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogGuid;
            T& operator()() { return LogGuid; }
            const T& operator()() const { return LogGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EventType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "EventType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EventType;
            T& operator()() { return EventType; }
            const T& operator()() const { return EventType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "PlayerGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerGuid;
            T& operator()() { return PlayerGuid; }
            const T& operator()() const { return PlayerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "Value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value;
            T& operator()() { return Value; }
            const T& operator()() const { return Value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TimeStamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "TimeStamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TimeStamp;
            T& operator()() { return TimeStamp; }
            const T& operator()() const { return TimeStamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GuildNewslog: sqlpp::table_t<GuildNewslog,
               GuildNewslog_::Guildid,
               GuildNewslog_::LogGuid,
               GuildNewslog_::EventType,
               GuildNewslog_::PlayerGuid,
               GuildNewslog_::Flags,
               GuildNewslog_::Value,
               GuildNewslog_::TimeStamp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_newslog";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildNewslog;
        T& operator()() { return guildNewslog; }
        const T& operator()() const { return guildNewslog; }
      };
    };
  };
  namespace GuildRank_
  {
    struct Guildid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guildid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guildid;
            T& operator()() { return guildid; }
            const T& operator()() const { return guildid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Rid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rid;
            T& operator()() { return rid; }
            const T& operator()() const { return rid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Rname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rname;
            T& operator()() { return rname; }
            const T& operator()() const { return rname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Rights
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rights";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rights;
            T& operator()() { return rights; }
            const T& operator()() const { return rights; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BankMoneyPerDay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "BankMoneyPerDay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BankMoneyPerDay;
            T& operator()() { return BankMoneyPerDay; }
            const T& operator()() const { return BankMoneyPerDay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GuildRank: sqlpp::table_t<GuildRank,
               GuildRank_::Guildid,
               GuildRank_::Rid,
               GuildRank_::Rname,
               GuildRank_::Rights,
               GuildRank_::BankMoneyPerDay>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_rank";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildRank;
        T& operator()() { return guildRank; }
        const T& operator()() const { return guildRank; }
      };
    };
  };
  namespace Instance_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Resettime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resettime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resettime;
            T& operator()() { return resettime; }
            const T& operator()() const { return resettime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Difficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "difficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficulty;
            T& operator()() { return difficulty; }
            const T& operator()() const { return difficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct CompletedEncounters
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "completedEncounters";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T completedEncounters;
            T& operator()() { return completedEncounters; }
            const T& operator()() const { return completedEncounters; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T data;
            T& operator()() { return data; }
            const T& operator()() const { return data; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct EntranceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entranceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entranceId;
            T& operator()() { return entranceId; }
            const T& operator()() const { return entranceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct Instance: sqlpp::table_t<Instance,
               Instance_::Id,
               Instance_::Map,
               Instance_::Resettime,
               Instance_::Difficulty,
               Instance_::CompletedEncounters,
               Instance_::Data,
               Instance_::EntranceId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instance;
        T& operator()() { return instance; }
        const T& operator()() const { return instance; }
      };
    };
  };
  namespace InstanceReset_
  {
    struct Mapid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mapid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapid;
            T& operator()() { return mapid; }
            const T& operator()() const { return mapid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Difficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "difficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficulty;
            T& operator()() { return difficulty; }
            const T& operator()() const { return difficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Resettime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "resettime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resettime;
            T& operator()() { return resettime; }
            const T& operator()() const { return resettime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct InstanceReset: sqlpp::table_t<InstanceReset,
               InstanceReset_::Mapid,
               InstanceReset_::Difficulty,
               InstanceReset_::Resettime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance_reset";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instanceReset;
        T& operator()() { return instanceReset; }
        const T& operator()() const { return instanceReset; }
      };
    };
  };
  namespace InstanceScenarioProgress_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Criteria
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "criteria";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T criteria;
            T& operator()() { return criteria; }
            const T& operator()() const { return criteria; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Counter
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "counter";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T counter;
            T& operator()() { return counter; }
            const T& operator()() const { return counter; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct InstanceScenarioProgress: sqlpp::table_t<InstanceScenarioProgress,
               InstanceScenarioProgress_::Id,
               InstanceScenarioProgress_::Criteria,
               InstanceScenarioProgress_::Counter,
               InstanceScenarioProgress_::Date>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance_scenario_progress";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instanceScenarioProgress;
        T& operator()() { return instanceScenarioProgress; }
        const T& operator()() const { return instanceScenarioProgress; }
      };
    };
  };
  namespace ItemInstance_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct ItemEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemEntry;
            T& operator()() { return itemEntry; }
            const T& operator()() const { return itemEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct OwnerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "owner_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ownerGuid;
            T& operator()() { return ownerGuid; }
            const T& operator()() const { return ownerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct CreatorGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "creatorGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creatorGuid;
            T& operator()() { return creatorGuid; }
            const T& operator()() const { return creatorGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct GiftCreatorGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "giftCreatorGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T giftCreatorGuid;
            T& operator()() { return giftCreatorGuid; }
            const T& operator()() const { return giftCreatorGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Count
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T count;
            T& operator()() { return count; }
            const T& operator()() const { return count; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Duration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "duration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duration;
            T& operator()() { return duration; }
            const T& operator()() const { return duration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Charges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "charges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charges;
            T& operator()() { return charges; }
            const T& operator()() const { return charges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Enchantments
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enchantments";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enchantments;
            T& operator()() { return enchantments; }
            const T& operator()() const { return enchantments; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct RandomPropertyId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "randomPropertyId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T randomPropertyId;
            T& operator()() { return randomPropertyId; }
            const T& operator()() const { return randomPropertyId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Durability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "durability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T durability;
            T& operator()() { return durability; }
            const T& operator()() const { return durability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct PlayedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playedTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playedTime;
            T& operator()() { return playedTime; }
            const T& operator()() const { return playedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Transmogrification
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "transmogrification";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T transmogrification;
            T& operator()() { return transmogrification; }
            const T& operator()() const { return transmogrification; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct UpgradeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "upgradeId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T upgradeId;
            T& operator()() { return upgradeId; }
            const T& operator()() const { return upgradeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EnchantIllusion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "enchantIllusion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T enchantIllusion;
            T& operator()() { return enchantIllusion; }
            const T& operator()() const { return enchantIllusion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BattlePetSpeciesId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlePetSpeciesId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlePetSpeciesId;
            T& operator()() { return battlePetSpeciesId; }
            const T& operator()() const { return battlePetSpeciesId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BattlePetBreedData
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlePetBreedData";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlePetBreedData;
            T& operator()() { return battlePetBreedData; }
            const T& operator()() const { return battlePetBreedData; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BattlePetLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlePetLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlePetLevel;
            T& operator()() { return battlePetLevel; }
            const T& operator()() const { return battlePetLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct BattlePetDisplayId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battlePetDisplayId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlePetDisplayId;
            T& operator()() { return battlePetDisplayId; }
            const T& operator()() const { return battlePetDisplayId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BonusListIDs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bonusListIDs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bonusListIDs;
            T& operator()() { return bonusListIDs; }
            const T& operator()() const { return bonusListIDs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct ItemInstance: sqlpp::table_t<ItemInstance,
               ItemInstance_::Guid,
               ItemInstance_::ItemEntry,
               ItemInstance_::OwnerGuid,
               ItemInstance_::CreatorGuid,
               ItemInstance_::GiftCreatorGuid,
               ItemInstance_::Count,
               ItemInstance_::Duration,
               ItemInstance_::Charges,
               ItemInstance_::Flags,
               ItemInstance_::Enchantments,
               ItemInstance_::RandomPropertyId,
               ItemInstance_::Durability,
               ItemInstance_::PlayedTime,
               ItemInstance_::Text,
               ItemInstance_::Transmogrification,
               ItemInstance_::UpgradeId,
               ItemInstance_::EnchantIllusion,
               ItemInstance_::BattlePetSpeciesId,
               ItemInstance_::BattlePetBreedData,
               ItemInstance_::BattlePetLevel,
               ItemInstance_::BattlePetDisplayId,
               ItemInstance_::BonusListIDs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_instance";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemInstance;
        T& operator()() { return itemInstance; }
        const T& operator()() const { return itemInstance; }
      };
    };
  };
  namespace ItemInstanceArtifact_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Xp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "xp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T xp;
            T& operator()() { return xp; }
            const T& operator()() const { return xp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ArtifactAppearanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "artifactAppearanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T artifactAppearanceId;
            T& operator()() { return artifactAppearanceId; }
            const T& operator()() const { return artifactAppearanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct ItemInstanceArtifact: sqlpp::table_t<ItemInstanceArtifact,
               ItemInstanceArtifact_::ItemGuid,
               ItemInstanceArtifact_::Xp,
               ItemInstanceArtifact_::ArtifactAppearanceId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_instance_artifact";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemInstanceArtifact;
        T& operator()() { return itemInstanceArtifact; }
        const T& operator()() const { return itemInstanceArtifact; }
      };
    };
  };
  namespace ItemInstanceArtifactPowers_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct ArtifactPowerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "artifactPowerId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T artifactPowerId;
            T& operator()() { return artifactPowerId; }
            const T& operator()() const { return artifactPowerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct PurchasedRank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "purchasedRank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T purchasedRank;
            T& operator()() { return purchasedRank; }
            const T& operator()() const { return purchasedRank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
  }

  struct ItemInstanceArtifactPowers: sqlpp::table_t<ItemInstanceArtifactPowers,
               ItemInstanceArtifactPowers_::ItemGuid,
               ItemInstanceArtifactPowers_::ArtifactPowerId,
               ItemInstanceArtifactPowers_::PurchasedRank>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_instance_artifact_powers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemInstanceArtifactPowers;
        T& operator()() { return itemInstanceArtifactPowers; }
        const T& operator()() const { return itemInstanceArtifactPowers; }
      };
    };
  };
  namespace ItemInstanceGems_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct GemItemId1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemItemId1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemItemId1;
            T& operator()() { return gemItemId1; }
            const T& operator()() const { return gemItemId1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct GemBonuses1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemBonuses1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemBonuses1;
            T& operator()() { return gemBonuses1; }
            const T& operator()() const { return gemBonuses1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct GemContext1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemContext1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemContext1;
            T& operator()() { return gemContext1; }
            const T& operator()() const { return gemContext1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct GemItemId2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemItemId2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemItemId2;
            T& operator()() { return gemItemId2; }
            const T& operator()() const { return gemItemId2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct GemBonuses2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemBonuses2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemBonuses2;
            T& operator()() { return gemBonuses2; }
            const T& operator()() const { return gemBonuses2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct GemContext2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemContext2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemContext2;
            T& operator()() { return gemContext2; }
            const T& operator()() const { return gemContext2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct GemItemId3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemItemId3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemItemId3;
            T& operator()() { return gemItemId3; }
            const T& operator()() const { return gemItemId3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct GemBonuses3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemBonuses3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemBonuses3;
            T& operator()() { return gemBonuses3; }
            const T& operator()() const { return gemBonuses3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct GemContext3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "gemContext3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gemContext3;
            T& operator()() { return gemContext3; }
            const T& operator()() const { return gemContext3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct ItemInstanceGems: sqlpp::table_t<ItemInstanceGems,
               ItemInstanceGems_::ItemGuid,
               ItemInstanceGems_::GemItemId1,
               ItemInstanceGems_::GemBonuses1,
               ItemInstanceGems_::GemContext1,
               ItemInstanceGems_::GemItemId2,
               ItemInstanceGems_::GemBonuses2,
               ItemInstanceGems_::GemContext2,
               ItemInstanceGems_::GemItemId3,
               ItemInstanceGems_::GemBonuses3,
               ItemInstanceGems_::GemContext3>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_instance_gems";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemInstanceGems;
        T& operator()() { return itemInstanceGems; }
        const T& operator()() const { return itemInstanceGems; }
      };
    };
  };
  namespace ItemInstanceModifiers_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct FixedScalingLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "fixedScalingLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fixedScalingLevel;
            T& operator()() { return fixedScalingLevel; }
            const T& operator()() const { return fixedScalingLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct ArtifactKnowledgeLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "artifactKnowledgeLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T artifactKnowledgeLevel;
            T& operator()() { return artifactKnowledgeLevel; }
            const T& operator()() const { return artifactKnowledgeLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  }

  struct ItemInstanceModifiers: sqlpp::table_t<ItemInstanceModifiers,
               ItemInstanceModifiers_::ItemGuid,
               ItemInstanceModifiers_::FixedScalingLevel,
               ItemInstanceModifiers_::ArtifactKnowledgeLevel>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_instance_modifiers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemInstanceModifiers;
        T& operator()() { return itemInstanceModifiers; }
        const T& operator()() const { return itemInstanceModifiers; }
      };
    };
  };
  namespace ItemInstanceTransmog_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct ItemModifiedAppearanceAllSpecs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemModifiedAppearanceAllSpecs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemModifiedAppearanceAllSpecs;
            T& operator()() { return itemModifiedAppearanceAllSpecs; }
            const T& operator()() const { return itemModifiedAppearanceAllSpecs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemModifiedAppearanceSpec1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemModifiedAppearanceSpec1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemModifiedAppearanceSpec1;
            T& operator()() { return itemModifiedAppearanceSpec1; }
            const T& operator()() const { return itemModifiedAppearanceSpec1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemModifiedAppearanceSpec2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemModifiedAppearanceSpec2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemModifiedAppearanceSpec2;
            T& operator()() { return itemModifiedAppearanceSpec2; }
            const T& operator()() const { return itemModifiedAppearanceSpec2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemModifiedAppearanceSpec3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemModifiedAppearanceSpec3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemModifiedAppearanceSpec3;
            T& operator()() { return itemModifiedAppearanceSpec3; }
            const T& operator()() const { return itemModifiedAppearanceSpec3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemModifiedAppearanceSpec4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemModifiedAppearanceSpec4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemModifiedAppearanceSpec4;
            T& operator()() { return itemModifiedAppearanceSpec4; }
            const T& operator()() const { return itemModifiedAppearanceSpec4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SpellItemEnchantmentAllSpecs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellItemEnchantmentAllSpecs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellItemEnchantmentAllSpecs;
            T& operator()() { return spellItemEnchantmentAllSpecs; }
            const T& operator()() const { return spellItemEnchantmentAllSpecs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SpellItemEnchantmentSpec1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellItemEnchantmentSpec1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellItemEnchantmentSpec1;
            T& operator()() { return spellItemEnchantmentSpec1; }
            const T& operator()() const { return spellItemEnchantmentSpec1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SpellItemEnchantmentSpec2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellItemEnchantmentSpec2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellItemEnchantmentSpec2;
            T& operator()() { return spellItemEnchantmentSpec2; }
            const T& operator()() const { return spellItemEnchantmentSpec2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SpellItemEnchantmentSpec3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellItemEnchantmentSpec3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellItemEnchantmentSpec3;
            T& operator()() { return spellItemEnchantmentSpec3; }
            const T& operator()() const { return spellItemEnchantmentSpec3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SpellItemEnchantmentSpec4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spellItemEnchantmentSpec4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellItemEnchantmentSpec4;
            T& operator()() { return spellItemEnchantmentSpec4; }
            const T& operator()() const { return spellItemEnchantmentSpec4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct ItemInstanceTransmog: sqlpp::table_t<ItemInstanceTransmog,
               ItemInstanceTransmog_::ItemGuid,
               ItemInstanceTransmog_::ItemModifiedAppearanceAllSpecs,
               ItemInstanceTransmog_::ItemModifiedAppearanceSpec1,
               ItemInstanceTransmog_::ItemModifiedAppearanceSpec2,
               ItemInstanceTransmog_::ItemModifiedAppearanceSpec3,
               ItemInstanceTransmog_::ItemModifiedAppearanceSpec4,
               ItemInstanceTransmog_::SpellItemEnchantmentAllSpecs,
               ItemInstanceTransmog_::SpellItemEnchantmentSpec1,
               ItemInstanceTransmog_::SpellItemEnchantmentSpec2,
               ItemInstanceTransmog_::SpellItemEnchantmentSpec3,
               ItemInstanceTransmog_::SpellItemEnchantmentSpec4>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_instance_transmog";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemInstanceTransmog;
        T& operator()() { return itemInstanceTransmog; }
        const T& operator()() const { return itemInstanceTransmog; }
      };
    };
  };
  namespace ItemLootItems_
  {
    struct ContainerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "container_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T containerId;
            T& operator()() { return containerId; }
            const T& operator()() const { return containerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item_count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemCount;
            T& operator()() { return itemCount; }
            const T& operator()() const { return itemCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct FollowRules
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "follow_rules";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T followRules;
            T& operator()() { return followRules; }
            const T& operator()() const { return followRules; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Ffa
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ffa";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ffa;
            T& operator()() { return ffa; }
            const T& operator()() const { return ffa; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Blocked
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "blocked";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blocked;
            T& operator()() { return blocked; }
            const T& operator()() const { return blocked; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Counted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "counted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T counted;
            T& operator()() { return counted; }
            const T& operator()() const { return counted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct UnderThreshold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "under_threshold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T underThreshold;
            T& operator()() { return underThreshold; }
            const T& operator()() const { return underThreshold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct NeedsQuest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "needs_quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T needsQuest;
            T& operator()() { return needsQuest; }
            const T& operator()() const { return needsQuest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RndProp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rnd_prop";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rndProp;
            T& operator()() { return rndProp; }
            const T& operator()() const { return rndProp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RndSuffix
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rnd_suffix";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rndSuffix;
            T& operator()() { return rndSuffix; }
            const T& operator()() const { return rndSuffix; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct ItemLootItems: sqlpp::table_t<ItemLootItems,
               ItemLootItems_::ContainerId,
               ItemLootItems_::ItemId,
               ItemLootItems_::ItemCount,
               ItemLootItems_::FollowRules,
               ItemLootItems_::Ffa,
               ItemLootItems_::Blocked,
               ItemLootItems_::Counted,
               ItemLootItems_::UnderThreshold,
               ItemLootItems_::NeedsQuest,
               ItemLootItems_::RndProp,
               ItemLootItems_::RndSuffix>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_loot_items";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemLootItems;
        T& operator()() { return itemLootItems; }
        const T& operator()() const { return itemLootItems; }
      };
    };
  };
  namespace ItemLootMoney_
  {
    struct ContainerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "container_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T containerId;
            T& operator()() { return containerId; }
            const T& operator()() const { return containerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Money
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "money";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T money;
            T& operator()() { return money; }
            const T& operator()() const { return money; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct ItemLootMoney: sqlpp::table_t<ItemLootMoney,
               ItemLootMoney_::ContainerId,
               ItemLootMoney_::Money>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_loot_money";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemLootMoney;
        T& operator()() { return itemLootMoney; }
        const T& operator()() const { return itemLootMoney; }
      };
    };
  };
  namespace ItemRefundInstance_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct PlayerGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "player_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerGuid;
            T& operator()() { return playerGuid; }
            const T& operator()() const { return playerGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct PaidMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "paidMoney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T paidMoney;
            T& operator()() { return paidMoney; }
            const T& operator()() const { return paidMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PaidExtendedCost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "paidExtendedCost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T paidExtendedCost;
            T& operator()() { return paidExtendedCost; }
            const T& operator()() const { return paidExtendedCost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct ItemRefundInstance: sqlpp::table_t<ItemRefundInstance,
               ItemRefundInstance_::ItemGuid,
               ItemRefundInstance_::PlayerGuid,
               ItemRefundInstance_::PaidMoney,
               ItemRefundInstance_::PaidExtendedCost>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_refund_instance";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemRefundInstance;
        T& operator()() { return itemRefundInstance; }
        const T& operator()() const { return itemRefundInstance; }
      };
    };
  };
  namespace ItemSoulboundTradeData_
  {
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "itemGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct AllowedPlayers
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "allowedPlayers";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allowedPlayers;
            T& operator()() { return allowedPlayers; }
            const T& operator()() const { return allowedPlayers; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct ItemSoulboundTradeData: sqlpp::table_t<ItemSoulboundTradeData,
               ItemSoulboundTradeData_::ItemGuid,
               ItemSoulboundTradeData_::AllowedPlayers>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_soulbound_trade_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemSoulboundTradeData;
        T& operator()() { return itemSoulboundTradeData; }
        const T& operator()() const { return itemSoulboundTradeData; }
      };
    };
  };
  namespace LfgData_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Dungeon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "dungeon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dungeon;
            T& operator()() { return dungeon; }
            const T& operator()() const { return dungeon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct LfgData: sqlpp::table_t<LfgData,
               LfgData_::Guid,
               LfgData_::Dungeon,
               LfgData_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lfg_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lfgData;
        T& operator()() { return lfgData; }
        const T& operator()() const { return lfgData; }
      };
    };
  };
  namespace Mail_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MessageType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "messageType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T messageType;
            T& operator()() { return messageType; }
            const T& operator()() const { return messageType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Stationery
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stationery";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stationery;
            T& operator()() { return stationery; }
            const T& operator()() const { return stationery; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct MailTemplateId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mailTemplateId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mailTemplateId;
            T& operator()() { return mailTemplateId; }
            const T& operator()() const { return mailTemplateId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Sender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "sender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sender;
            T& operator()() { return sender; }
            const T& operator()() const { return sender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Receiver
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "receiver";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T receiver;
            T& operator()() { return receiver; }
            const T& operator()() const { return receiver; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Subject
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "subject";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subject;
            T& operator()() { return subject; }
            const T& operator()() const { return subject; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Body
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "body";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T body;
            T& operator()() { return body; }
            const T& operator()() const { return body; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct HasItems
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "has_items";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hasItems;
            T& operator()() { return hasItems; }
            const T& operator()() const { return hasItems; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ExpireTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "expire_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expireTime;
            T& operator()() { return expireTime; }
            const T& operator()() const { return expireTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct DeliverTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "deliver_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T deliverTime;
            T& operator()() { return deliverTime; }
            const T& operator()() const { return deliverTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Money
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "money";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T money;
            T& operator()() { return money; }
            const T& operator()() const { return money; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Cod
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cod";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cod;
            T& operator()() { return cod; }
            const T& operator()() const { return cod; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Checked
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "checked";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T checked;
            T& operator()() { return checked; }
            const T& operator()() const { return checked; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct Mail: sqlpp::table_t<Mail,
               Mail_::Id,
               Mail_::MessageType,
               Mail_::Stationery,
               Mail_::MailTemplateId,
               Mail_::Sender,
               Mail_::Receiver,
               Mail_::Subject,
               Mail_::Body,
               Mail_::HasItems,
               Mail_::ExpireTime,
               Mail_::DeliverTime,
               Mail_::Money,
               Mail_::Cod,
               Mail_::Checked>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mail";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mail;
        T& operator()() { return mail; }
        const T& operator()() const { return mail; }
      };
    };
  };
  namespace MailItems_
  {
    struct MailId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "mail_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mailId;
            T& operator()() { return mailId; }
            const T& operator()() const { return mailId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "item_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemGuid;
            T& operator()() { return itemGuid; }
            const T& operator()() const { return itemGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Receiver
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "receiver";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T receiver;
            T& operator()() { return receiver; }
            const T& operator()() const { return receiver; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
  }

  struct MailItems: sqlpp::table_t<MailItems,
               MailItems_::MailId,
               MailItems_::ItemGuid,
               MailItems_::Receiver>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mail_items";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mailItems;
        T& operator()() { return mailItems; }
        const T& operator()() const { return mailItems; }
      };
    };
  };
  namespace PetAura_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CasterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "casterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T casterGuid;
            T& operator()() { return casterGuid; }
            const T& operator()() const { return casterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EffectMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "effectMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectMask;
            T& operator()() { return effectMask; }
            const T& operator()() const { return effectMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct RecalculateMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "recalculateMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recalculateMask;
            T& operator()() { return recalculateMask; }
            const T& operator()() const { return recalculateMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct StackCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "stackCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stackCount;
            T& operator()() { return stackCount; }
            const T& operator()() const { return stackCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct MaxDuration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "maxDuration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxDuration;
            T& operator()() { return maxDuration; }
            const T& operator()() const { return maxDuration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RemainTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "remainTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remainTime;
            T& operator()() { return remainTime; }
            const T& operator()() const { return remainTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RemainCharges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "remainCharges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T remainCharges;
            T& operator()() { return remainCharges; }
            const T& operator()() const { return remainCharges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct PetAura: sqlpp::table_t<PetAura,
               PetAura_::Guid,
               PetAura_::CasterGuid,
               PetAura_::Spell,
               PetAura_::EffectMask,
               PetAura_::RecalculateMask,
               PetAura_::StackCount,
               PetAura_::MaxDuration,
               PetAura_::RemainTime,
               PetAura_::RemainCharges>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_aura";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petAura;
        T& operator()() { return petAura; }
        const T& operator()() const { return petAura; }
      };
    };
  };
  namespace PetAuraEffect_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CasterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "casterGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T casterGuid;
            T& operator()() { return casterGuid; }
            const T& operator()() const { return casterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::blob, sqlpp::tag::require_insert>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EffectMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "effectMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectMask;
            T& operator()() { return effectMask; }
            const T& operator()() const { return effectMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct EffectIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "effectIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectIndex;
            T& operator()() { return effectIndex; }
            const T& operator()() const { return effectIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BaseAmount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "baseAmount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T baseAmount;
            T& operator()() { return baseAmount; }
            const T& operator()() const { return baseAmount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct PetAuraEffect: sqlpp::table_t<PetAuraEffect,
               PetAuraEffect_::Guid,
               PetAuraEffect_::CasterGuid,
               PetAuraEffect_::Spell,
               PetAuraEffect_::EffectMask,
               PetAuraEffect_::EffectIndex,
               PetAuraEffect_::Amount,
               PetAuraEffect_::BaseAmount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_aura_effect";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petAuraEffect;
        T& operator()() { return petAuraEffect; }
        const T& operator()() const { return petAuraEffect; }
      };
    };
  };
  namespace PetSpell_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct PetSpell: sqlpp::table_t<PetSpell,
               PetSpell_::Guid,
               PetSpell_::Spell,
               PetSpell_::Active>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_spell";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petSpell;
        T& operator()() { return petSpell; }
        const T& operator()() const { return petSpell; }
      };
    };
  };
  namespace PetSpellCharges_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct CategoryId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categoryId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryId;
            T& operator()() { return categoryId; }
            const T& operator()() const { return categoryId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RechargeStart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rechargeStart";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rechargeStart;
            T& operator()() { return rechargeStart; }
            const T& operator()() const { return rechargeStart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RechargeEnd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rechargeEnd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rechargeEnd;
            T& operator()() { return rechargeEnd; }
            const T& operator()() const { return rechargeEnd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct PetSpellCharges: sqlpp::table_t<PetSpellCharges,
               PetSpellCharges_::Guid,
               PetSpellCharges_::CategoryId,
               PetSpellCharges_::RechargeStart,
               PetSpellCharges_::RechargeEnd>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_spell_charges";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petSpellCharges;
        T& operator()() { return petSpellCharges; }
        const T& operator()() const { return petSpellCharges; }
      };
    };
  };
  namespace PetSpellCooldown_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CategoryId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categoryId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryId;
            T& operator()() { return categoryId; }
            const T& operator()() const { return categoryId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CategoryEnd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "categoryEnd";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T categoryEnd;
            T& operator()() { return categoryEnd; }
            const T& operator()() const { return categoryEnd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct PetSpellCooldown: sqlpp::table_t<PetSpellCooldown,
               PetSpellCooldown_::Guid,
               PetSpellCooldown_::Spell,
               PetSpellCooldown_::Time,
               PetSpellCooldown_::CategoryId,
               PetSpellCooldown_::CategoryEnd>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_spell_cooldown";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petSpellCooldown;
        T& operator()() { return petSpellCooldown; }
        const T& operator()() const { return petSpellCooldown; }
      };
    };
  };
  namespace Petition_
  {
    struct Ownerguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ownerguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ownerguid;
            T& operator()() { return ownerguid; }
            const T& operator()() const { return ownerguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Petitionguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "petitionguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petitionguid;
            T& operator()() { return petitionguid; }
            const T& operator()() const { return petitionguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::can_be_null>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  }

  struct Petition: sqlpp::table_t<Petition,
               Petition_::Ownerguid,
               Petition_::Petitionguid,
               Petition_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "petition";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petition;
        T& operator()() { return petition; }
        const T& operator()() const { return petition; }
      };
    };
  };
  namespace PetitionSign_
  {
    struct Ownerguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ownerguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ownerguid;
            T& operator()() { return ownerguid; }
            const T& operator()() const { return ownerguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Petitionguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "petitionguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T petitionguid;
            T& operator()() { return petitionguid; }
            const T& operator()() const { return petitionguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Playerguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "playerguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerguid;
            T& operator()() { return playerguid; }
            const T& operator()() const { return playerguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct PlayerAccount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "player_account";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T playerAccount;
            T& operator()() { return playerAccount; }
            const T& operator()() const { return playerAccount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct PetitionSign: sqlpp::table_t<PetitionSign,
               PetitionSign_::Ownerguid,
               PetitionSign_::Petitionguid,
               PetitionSign_::Playerguid,
               PetitionSign_::PlayerAccount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "petition_sign";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petitionSign;
        T& operator()() { return petitionSign; }
        const T& operator()() const { return petitionSign; }
      };
    };
  };
  namespace PoolQuestSave_
  {
    struct PoolId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "pool_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolId;
            T& operator()() { return poolId; }
            const T& operator()() const { return poolId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questId;
            T& operator()() { return questId; }
            const T& operator()() const { return questId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct PoolQuestSave: sqlpp::table_t<PoolQuestSave,
               PoolQuestSave_::PoolId,
               PoolQuestSave_::QuestId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pool_quest_save";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T poolQuestSave;
        T& operator()() { return poolQuestSave; }
        const T& operator()() const { return poolQuestSave; }
      };
    };
  };
  namespace PvpstatsBattlegrounds_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct WinnerFaction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "winner_faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T winnerFaction;
            T& operator()() { return winnerFaction; }
            const T& operator()() const { return winnerFaction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct BracketId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "bracket_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bracketId;
            T& operator()() { return bracketId; }
            const T& operator()() const { return bracketId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
  }

  struct PvpstatsBattlegrounds: sqlpp::table_t<PvpstatsBattlegrounds,
               PvpstatsBattlegrounds_::Id,
               PvpstatsBattlegrounds_::WinnerFaction,
               PvpstatsBattlegrounds_::BracketId,
               PvpstatsBattlegrounds_::Type,
               PvpstatsBattlegrounds_::Date>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pvpstats_battlegrounds";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pvpstatsBattlegrounds;
        T& operator()() { return pvpstatsBattlegrounds; }
        const T& operator()() const { return pvpstatsBattlegrounds; }
      };
    };
  };
  namespace PvpstatsPlayers_
  {
    struct BattlegroundId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "battleground_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlegroundId;
            T& operator()() { return battlegroundId; }
            const T& operator()() const { return battlegroundId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct CharacterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "character_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T characterGuid;
            T& operator()() { return characterGuid; }
            const T& operator()() const { return characterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Winner
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "winner";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T winner;
            T& operator()() { return winner; }
            const T& operator()() const { return winner; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScoreKillingBlows
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score_killing_blows";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scoreKillingBlows;
            T& operator()() { return scoreKillingBlows; }
            const T& operator()() const { return scoreKillingBlows; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScoreDeaths
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score_deaths";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scoreDeaths;
            T& operator()() { return scoreDeaths; }
            const T& operator()() const { return scoreDeaths; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScoreHonorableKills
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score_honorable_kills";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scoreHonorableKills;
            T& operator()() { return scoreHonorableKills; }
            const T& operator()() const { return scoreHonorableKills; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScoreBonusHonor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score_bonus_honor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scoreBonusHonor;
            T& operator()() { return scoreBonusHonor; }
            const T& operator()() const { return scoreBonusHonor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScoreDamageDone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score_damage_done";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scoreDamageDone;
            T& operator()() { return scoreDamageDone; }
            const T& operator()() const { return scoreDamageDone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScoreHealingDone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "score_healing_done";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scoreHealingDone;
            T& operator()() { return scoreHealingDone; }
            const T& operator()() const { return scoreHealingDone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Attr1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attr_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attr1;
            T& operator()() { return attr1; }
            const T& operator()() const { return attr1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Attr2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attr_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attr2;
            T& operator()() { return attr2; }
            const T& operator()() const { return attr2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Attr3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attr_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attr3;
            T& operator()() { return attr3; }
            const T& operator()() const { return attr3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Attr4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attr_4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attr4;
            T& operator()() { return attr4; }
            const T& operator()() const { return attr4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Attr5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "attr_5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attr5;
            T& operator()() { return attr5; }
            const T& operator()() const { return attr5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct PvpstatsPlayers: sqlpp::table_t<PvpstatsPlayers,
               PvpstatsPlayers_::BattlegroundId,
               PvpstatsPlayers_::CharacterGuid,
               PvpstatsPlayers_::Winner,
               PvpstatsPlayers_::ScoreKillingBlows,
               PvpstatsPlayers_::ScoreDeaths,
               PvpstatsPlayers_::ScoreHonorableKills,
               PvpstatsPlayers_::ScoreBonusHonor,
               PvpstatsPlayers_::ScoreDamageDone,
               PvpstatsPlayers_::ScoreHealingDone,
               PvpstatsPlayers_::Attr1,
               PvpstatsPlayers_::Attr2,
               PvpstatsPlayers_::Attr3,
               PvpstatsPlayers_::Attr4,
               PvpstatsPlayers_::Attr5>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pvpstats_players";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pvpstatsPlayers;
        T& operator()() { return pvpstatsPlayers; }
        const T& operator()() const { return pvpstatsPlayers; }
      };
    };
  };
  namespace QuestTracker_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct CharacterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "character_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T characterGuid;
            T& operator()() { return characterGuid; }
            const T& operator()() const { return characterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct QuestAcceptTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest_accept_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questAcceptTime;
            T& operator()() { return questAcceptTime; }
            const T& operator()() const { return questAcceptTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::require_insert>;
    };
    struct QuestCompleteTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest_complete_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questCompleteTime;
            T& operator()() { return questCompleteTime; }
            const T& operator()() const { return questCompleteTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct QuestAbandonTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quest_abandon_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questAbandonTime;
            T& operator()() { return questAbandonTime; }
            const T& operator()() const { return questAbandonTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point, sqlpp::tag::can_be_null>;
    };
    struct CompletedByGm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "completed_by_gm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T completedByGm;
            T& operator()() { return completedByGm; }
            const T& operator()() const { return completedByGm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct CoreHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "core_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T coreHash;
            T& operator()() { return coreHash; }
            const T& operator()() const { return coreHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct CoreRevision
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "core_revision";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T coreRevision;
            T& operator()() { return coreRevision; }
            const T& operator()() const { return coreRevision; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct QuestTracker: sqlpp::table_t<QuestTracker,
               QuestTracker_::Id,
               QuestTracker_::CharacterGuid,
               QuestTracker_::QuestAcceptTime,
               QuestTracker_::QuestCompleteTime,
               QuestTracker_::QuestAbandonTime,
               QuestTracker_::CompletedByGm,
               QuestTracker_::CoreHash,
               QuestTracker_::CoreRevision>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_tracker";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questTracker;
        T& operator()() { return questTracker; }
        const T& operator()() const { return questTracker; }
      };
    };
  };
  namespace ReservedName_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct ReservedName: sqlpp::table_t<ReservedName,
               ReservedName_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "reserved_name";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T reservedName;
        T& operator()() { return reservedName; }
        const T& operator()() const { return reservedName; }
      };
    };
  };
  namespace Updates_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Hash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hash;
            T& operator()() { return hash; }
            const T& operator()() const { return hash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::time_point>;
    };
    struct Speed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speed;
            T& operator()() { return speed; }
            const T& operator()() const { return speed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct Updates: sqlpp::table_t<Updates,
               Updates_::Name,
               Updates_::Hash,
               Updates_::State,
               Updates_::Timestamp,
               Updates_::Speed>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "updates";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T updates;
        T& operator()() { return updates; }
        const T& operator()() const { return updates; }
      };
    };
  };
  namespace UpdatesInclude_
  {
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
  }

  struct UpdatesInclude: sqlpp::table_t<UpdatesInclude,
               UpdatesInclude_::Path,
               UpdatesInclude_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "updates_include";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T updatesInclude;
        T& operator()() { return updatesInclude; }
        const T& operator()() const { return updatesInclude; }
      };
    };
  };
  namespace WardenAction_
  {
    struct WardenId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "wardenId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wardenId;
            T& operator()() { return wardenId; }
            const T& operator()() const { return wardenId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct Action
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "action";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T action;
            T& operator()() { return action; }
            const T& operator()() const { return action; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
  }

  struct WardenAction: sqlpp::table_t<WardenAction,
               WardenAction_::WardenId,
               WardenAction_::Action>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "warden_action";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T wardenAction;
        T& operator()() { return wardenAction; }
        const T& operator()() const { return wardenAction; }
      };
    };
  };
  namespace Worldstates_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Value
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "value";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value;
            T& operator()() { return value; }
            const T& operator()() const { return value; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct Worldstates: sqlpp::table_t<Worldstates,
               Worldstates_::Entry,
               Worldstates_::Value,
               Worldstates_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "worldstates";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T worldstates;
        T& operator()() { return worldstates; }
        const T& operator()() const { return worldstates; }
      };
    };
  };
}
#endif
